openapi: 3.0.0
info:
  contact:
    email: mach@labdigital.nl
    name: MACH composer support
    url: https://docs.machcomposer.io/
  description: |
    # Introduction

    MACH composer Cloud is a platform and API to facilitate and coordinate work
    across teams that build composable architectures using MACH technology.

    All operations available in MACH composer cloud are available through this
    API. For more information about using it in your MACH architecture, have a
    look at the [documentation
    website](https://docs.machcomposer.io/cloud/index.html).
  license:
    name: Private
    url: https://www.labdigital.nl/general-terms-and-conditions/
  termsOfService: https://www.labdigital.nl/general-terms-and-conditions/
  title: MACH composer Cloud (MCC) Public API
  version: 0.1.0
  x-logo:
    url: https://docs.machcomposer.io/_img/logo.png
    altText: MACH composer Cloud
servers:
- description: Live environment
  url: https://api.mach.cloud
security:
- OAuth2:
  - api-client:read
  - api-client:write
  - component:read
  - component:write
  - component-version:write
paths:
  /account/me:
    get:
      description: Return user information from current user
      operationId: MyAccountInformation
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyAccountInformation_200_response'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
      summary: Get user information
      tags:
      - My Account
  /organizations:
    get:
      operationId: OrganizationQuery
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationPaginator'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
      summary: List all organizations
      tags:
      - Organization Management
    post:
      operationId: OrganizationCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationDraft'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: OK
          links:
            ProjectCreateSetOrganization:
              operationId: ProjectCreate
              parameters:
                organization: $response.body#/key
            ProjectQuerySetOrganization:
              operationId: ProjectCreate
              parameters:
                organization: $response.body#/key
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
      summary: Create new organization
      tags:
      - Organization Management
  /organizations/{organization}:
    patch:
      operationId: OrganizationPatch
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            example:
            - op: replace
              path: /name
              value: New Organization Name
            schema:
              $ref: '#/components/schemas/PatchRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
      summary: Update an organization
      tags:
      - Organization Management
  /organizations/{organization}/users:
    get:
      operationId: OrganizationUserQuery
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUserPaginator'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: List all users in an organization
      tags:
      - Organization Management
  /organizations/{organization}/users/invite:
    post:
      operationId: OrganizationUserInvite
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationUserInviteDraft'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUserInvite'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Invite a user to the organization
      tags:
      - Organization Management
  /organizations/{organization}/users/invite/{id}:
    get:
      operationId: OrganizationUserInviteView
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Invite ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUserInviteData'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      security: []
      summary: View invite information
      tags:
      - Organization Management
    post:
      operationId: OrganizationUserInviteAccept
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Invite ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUserInviteData'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Accept a user invite
      tags:
      - Organization Management
  /organizations/{organization}/projects:
    get:
      operationId: ProjectQuery
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectPaginator'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
      summary: List all projects in an organization
      tags:
      - Organization Management
    post:
      operationId: ProjectCreate
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectDraft'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Create new project in an organization
      tags:
      - Organization Management
  /organizations/{organization}/projects/{project}:
    patch:
      operationId: ProjectPatch
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            example:
            - op: replace
              path: /name
              value: New Project Name
            schema:
              $ref: '#/components/schemas/PatchRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
      summary: Update a Project
      tags:
      - Organization Management
  /organizations/{organization}/projects/{project}/api-clients:
    get:
      operationId: ApiClientQuery
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiClientPaginator'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
      summary: List all api clients
      tags:
      - API Clients
    post:
      operationId: ApiClientCreate
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiClientDraft'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiClient'
          description: New API Client created
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Create new api client
      tags:
      - API Clients
  /organizations/{organization}/projects/{project}/components:
    get:
      operationId: ComponentQuery
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentPaginator'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: List all components
      tags:
      - Components
    post:
      operationId: ComponentCreate
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentDraft'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Component'
          description: New component created
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Create component
      tags:
      - Components
  /organizations/{organization}/projects/{project}/components/{component}:
    patch:
      operationId: ComponentPatch
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Component key
        explode: false
        in: path
        name: component
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            example:
            - op: replace
              path: /key
              value: foobar
            schema:
              $ref: '#/components/schemas/PatchRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Component'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
      summary: Patch an existing component
      tags:
      - Components
  /organizations/{organization}/projects/{project}/components/{component}/latest:
    get:
      operationId: ComponentLatestVersion
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Component key
        explode: false
        in: path
        name: component
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: branch
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentVersion'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Get last component version
      tags:
      - Components
  /organizations/{organization}/projects/{project}/components/{component}/versions:
    get:
      operationId: ComponentVersionQuery
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Component key
        explode: false
        in: path
        name: component
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentVersionPaginator'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: List all versions of a component
      tags:
      - Components
    post:
      operationId: ComponentVersionCreate
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Component key
        explode: false
        in: path
        name: component
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentVersionDraft'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentVersion'
          description: New version created
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Create component
      tags:
      - Components
  /organizations/{organization}/projects/{project}/components/{component}/versions/{version}:
    delete:
      operationId: ComponentVersionDelete
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Component key
        explode: false
        in: path
        name: component
        required: true
        schema:
          type: string
        style: simple
      - description: Version
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentVersion'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Delete component version
      tags:
      - Components
    get:
      operationId: ComponentVersionGet
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Component key
        explode: false
        in: path
        name: component
        required: true
        schema:
          type: string
        style: simple
      - description: Version
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentVersion'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Get component version
      tags:
      - Components
  /organizations/{organization}/projects/{project}/components/{component}/versions/{version}/commits:
    get:
      operationId: ComponentVersionQueryCommits
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Component key
        explode: false
        in: path
        name: component
        required: true
        schema:
          type: string
        style: simple
      - description: Component version
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDataPaginator'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Get commits for this component version
      tags:
      - Components
    post:
      operationId: ComponentVersionPushCommits
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Component key
        explode: false
        in: path
        name: component
        required: true
        schema:
          type: string
        style: simple
      - description: Component version
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentVersionCommits'
        required: true
      responses:
        "201":
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Push commits for this component version
      tags:
      - Components
components:
  parameters:
    OrganizationParam:
      description: Organization Key
      explode: false
      in: path
      name: organization
      required: true
      schema:
        example: my-organization
        type: string
      style: simple
    ProjectParam:
      description: Project Key
      explode: false
      in: path
      name: project
      required: true
      schema:
        example: my-project
        type: string
      style: simple
    OffsetParam:
      explode: true
      in: query
      name: offset
      required: false
      schema:
        default: 0
        type: integer
      style: form
    LimitParam:
      explode: true
      in: query
      name: limit
      required: false
      schema:
        type: integer
      style: form
    SortParam:
      explode: true
      in: query
      name: sort
      required: false
      schema:
        items:
          type: string
        type: array
      style: form
  responses:
    ErrorResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Invalid request
    ErrorUnauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorUnauthorized'
      description: Unauthorized
    ErrorForbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorForbidden'
      description: Forbidden
  schemas:
    ErrorObject:
      properties:
        code:
          type: string
        message:
          type: string
      required:
      - code
      - message
      type: object
    Error:
      properties:
        status:
          format: integer
          type: number
        summary:
          type: string
        description:
          type: string
        errors:
          items:
            $ref: '#/components/schemas/ErrorObject'
          type: array
      required:
      - status
      - summary
      type: object
    Paginator:
      properties:
        count:
          description: Number of items in the current page
          type: number
        total:
          description: Total number of items found
          type: number
        offset:
          default: 0
          type: number
        limit:
          default: 20
          type: number
      required:
      - count
      - limit
      - offset
      - results
      - total
      type: object
    BaseResource:
      properties:
        created_at:
          format: date-time
          type: string
      required:
      - created_at
      type: object
    Organization:
      allOf:
      - $ref: '#/components/schemas/BaseResource'
      - $ref: '#/components/schemas/Organization_allOf'
    OrganizationPaginator:
      allOf:
      - $ref: '#/components/schemas/Paginator'
      - $ref: '#/components/schemas/OrganizationPaginator_allOf'
    OrganizationDraft:
      example:
        name: name
        key: key
      properties:
        key:
          description: The organization key (must be unique)
          type: string
        name:
          description: The name of the organization
          type: string
      required:
      - key
      - name
      type: object
    JSONPatchRequestAddReplaceTest:
      additionalProperties: false
      properties:
        path:
          description: A JSON Pointer path.
          type: string
        value:
          description: "The value to add, replace or test."
        op:
          description: The operation to perform.
          enum:
          - add
          - replace
          - test
          type: string
      required:
      - op
      - path
      - value
      type: object
    JSONPatchRequestRemove:
      additionalProperties: false
      properties:
        path:
          description: A JSON Pointer path.
          type: string
        op:
          description: The operation to perform.
          enum:
          - remove
          type: string
      required:
      - op
      - path
      type: object
    JSONPatchRequestMoveCopy:
      additionalProperties: false
      properties:
        path:
          description: A JSON Pointer path.
          type: string
        op:
          description: The operation to perform.
          enum:
          - move
          - copy
          type: string
      required:
      - from
      - op
      - path
      type: object
    PatchRequest:
      description: JSON Patch is specified in RFC 6902 from the IETF.
      items:
        $ref: '#/components/schemas/PatchRequest_inner'
      type: array
    OrganizationUser:
      properties:
        client_id:
          format: uuid
          type: string
        created_at:
          format: date-time
          type: string
        name:
          description: Name of the user
          type: string
        email:
          description: E-mail address of the user
          type: string
        avatar_url:
          description: The avatar profile image url of the user
          type: string
        organization_key:
          description: Key of the organization
          type: string
        organization_name:
          description: Name of the organization
          type: string
        organization_scopes:
          items:
            type: string
          type: array
        projects:
          items:
            $ref: '#/components/schemas/OrganizationUser_projects_inner'
          type: array
      required:
      - email
      type: object
    OrganizationUserPaginator:
      allOf:
      - $ref: '#/components/schemas/Paginator'
      - $ref: '#/components/schemas/OrganizationUserPaginator_allOf'
    OrganizationUserInviteDraft:
      example:
        role: owner
        project_key: project_key
        email: email
      properties:
        email:
          description: E-mail address of the user
          format: email
          type: string
        project_key:
          description: Key of the project to invite user to
          type: string
        role:
          description: Role for the user
          enum:
          - owner
          - member
          - viewer
          type: string
      required:
      - email
      type: object
    OrganizationUserInvite:
      example:
        role: owner
        project_key: project_key
        created_by: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        email: email
      properties:
        created_by:
          format: uuid
          type: string
        email:
          description: E-mail address of the user
          format: email
          type: string
        project_key:
          description: Key of the project to invite user to
          type: string
        role:
          description: Role for the user
          enum:
          - owner
          - member
          - viewer
          type: string
      required:
      - email
      type: object
    OrganizationUserInviteData:
      example:
        organization:
          name: ACME Ltd.
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        created_by: John Doe
      properties:
        id:
          format: uuid
          type: string
        created_by:
          example: John Doe
          type: string
        organization:
          $ref: '#/components/schemas/OrganizationUserInviteData_organization'
      required:
      - created_by
      - id
      - organization
      type: object
    Project:
      allOf:
      - $ref: '#/components/schemas/BaseResource'
      - $ref: '#/components/schemas/Project_allOf'
    ProjectPaginator:
      allOf:
      - $ref: '#/components/schemas/Paginator'
      - $ref: '#/components/schemas/ProjectPaginator_allOf'
    ProjectDraft:
      example:
        name: name
        key: key
      properties:
        key:
          description: The organization key (must be unique)
          type: string
        name:
          description: The name of the organization
          type: string
      required:
      - key
      - name
      type: object
    ApiClient:
      allOf:
      - $ref: '#/components/schemas/BaseResource'
      - $ref: '#/components/schemas/ApiClient_allOf'
    ApiClientPaginator:
      allOf:
      - $ref: '#/components/schemas/Paginator'
      - $ref: '#/components/schemas/ApiClientPaginator_allOf'
    ApiClientDraft:
      example:
        scope:
        - scope
        - scope
        description: description
      properties:
        description:
          description: description about the api client
          type: string
        scope:
          description: Scope
          items:
            type: string
          type: array
      type: object
    Component:
      allOf:
      - $ref: '#/components/schemas/BaseResource'
      - $ref: '#/components/schemas/Component_allOf'
    ComponentPaginator:
      allOf:
      - $ref: '#/components/schemas/Paginator'
      - $ref: '#/components/schemas/ComponentPaginator_allOf'
    ComponentDraft:
      example:
        key: key
      properties:
        key:
          type: string
      required:
      - key
      type: object
    ComponentVersion:
      allOf:
      - $ref: '#/components/schemas/BaseResource'
      - $ref: '#/components/schemas/ComponentVersion_allOf'
    ComponentVersionPaginator:
      allOf:
      - $ref: '#/components/schemas/Paginator'
      - $ref: '#/components/schemas/ComponentVersionPaginator_allOf'
    ComponentVersionDraft:
      example:
        component: component
        version: version
        branch: branch
      properties:
        component:
          type: string
        version:
          type: string
        branch:
          type: string
      required:
      - branch
      - component
      - version
      type: object
    CommitDataAuthor:
      properties:
        name:
          type: string
        email:
          type: string
        date:
          format: date-time
          type: string
      required:
      - date
      - email
      - name
      type: object
    CommitDataDraft:
      properties:
        commit:
          type: string
        parents:
          items:
            type: string
          type: array
        subject:
          type: string
        author:
          $ref: '#/components/schemas/CommitDataAuthor'
        committer:
          $ref: '#/components/schemas/CommitDataAuthor'
      required:
      - author
      - commit
      - committer
      - parent
      - subject
      type: object
    CommitData:
      allOf:
      - $ref: '#/components/schemas/CommitDataDraft'
      - $ref: '#/components/schemas/CommitData_allOf'
    CommitDataPaginator:
      allOf:
      - $ref: '#/components/schemas/Paginator'
      - $ref: '#/components/schemas/CommitDataPaginator_allOf'
    ComponentVersionCommits:
      example:
        commits:
        - null
        - null
      properties:
        commits:
          items:
            $ref: '#/components/schemas/CommitData'
          type: array
      required:
      - commits
      type: object
    MyAccountInformation_200_response:
      example:
        avatar_url: avatar_url
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        email: email
      properties:
        created_at:
          format: date-time
          type: string
        name:
          description: Name of the user
          type: string
        email:
          description: E-mail address of the user
          type: string
        avatar_url:
          type: string
    ErrorUnauthorized:
      properties:
        message:
          type: string
      title: ErrorUnauthorized
      type: object
    ErrorForbidden:
      properties:
        status:
          format: integer
          type: number
        summary:
          type: string
        description:
          type: string
        message:
          type: string
      title: ErrorForbidden
      type: object
    Organization_allOf:
      properties:
        key:
          description: The organization key (must be unique)
          type: string
        name:
          description: The name of the organization
          type: string
      required:
      - key
      - name
      type: object
      example: null
    OrganizationPaginator_allOf:
      properties:
        results:
          items:
            $ref: '#/components/schemas/Organization'
          type: array
      type: object
      example: null
    PatchRequest_inner:
      oneOf:
      - $ref: '#/components/schemas/JSONPatchRequestAddReplaceTest'
      - $ref: '#/components/schemas/JSONPatchRequestRemove'
      - $ref: '#/components/schemas/JSONPatchRequestMoveCopy'
    OrganizationUser_projects_inner:
      properties:
        name:
          type: string
        key:
          type: string
        scopes:
          items:
            type: string
          type: array
      type: object
    OrganizationUserPaginator_allOf:
      properties:
        results:
          items:
            $ref: '#/components/schemas/OrganizationUser'
          type: array
      type: object
      example: null
    OrganizationUserInviteData_organization:
      example:
        name: ACME Ltd.
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        name:
          example: ACME Ltd.
          type: string
      required:
      - id
      - name
      type: object
    Project_allOf:
      properties:
        key:
          description: The organization key (must be unique)
          type: string
        name:
          description: The name of the organization
          type: string
        description:
          description: description about the api client
          type: string
      required:
      - key
      - name
      type: object
      example: null
    ProjectPaginator_allOf:
      properties:
        results:
          items:
            $ref: '#/components/schemas/Project'
          type: array
      type: object
      example: null
    ApiClient_allOf:
      properties:
        description:
          description: description about the api client
          type: string
        client_id:
          description: the client id
          type: string
        client_secret:
          description: the client id
          type: string
        last_used_at:
          format: date-time
          type: string
        scope:
          description: Scope
          items:
            type: string
          type: array
      required:
      - client_id
      - client_secret
      - scope
      type: object
      example: null
    ApiClientPaginator_allOf:
      properties:
        results:
          items:
            $ref: '#/components/schemas/ApiClient'
          type: array
      type: object
      example: null
    Component_allOf:
      properties:
        key:
          description: key of the component
          type: string
      type: object
      example: null
    ComponentPaginator_allOf:
      properties:
        results:
          items:
            $ref: '#/components/schemas/Component'
          type: array
      type: object
      example: null
    ComponentVersion_allOf:
      properties:
        component:
          description: key of the component
          type: string
        version:
          description: version of the component
          type: string
        branch:
          description: branch of the version
          type: string
      required:
      - component
      - version
      type: object
      example: null
    ComponentVersionPaginator_allOf:
      properties:
        results:
          items:
            $ref: '#/components/schemas/ComponentVersion'
          type: array
      type: object
      example: null
    CommitData_allOf:
      properties:
        created_at:
          format: date-time
          type: string
      type: object
      example: null
    CommitDataPaginator_allOf:
      properties:
        results:
          items:
            $ref: '#/components/schemas/CommitData'
          type: array
      type: object
      example: null
  securitySchemes:
    OAuth2:
      flows:
        authorizationCode:
          authorizationUrl: http://localhost:3000
          scopes:
            api: Grants complete read/write access to the API
          tokenUrl: http://localhost:3000/oauth/token
          x-usePkce:
            disableManualConfiguration: false
            hideClientSecretInput: false
        clientCredentials:
          scopes:
            api: Grants complete read/write access to the API
          tokenUrl: http://localhost:3000/oauth/token
      type: oauth2
