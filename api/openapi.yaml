openapi: 3.0.0
info:
  contact:
    email: mach@labdigital.nl
    name: MACH composer support
    url: https://docs.machcomposer.io/
  description: |
    # Introduction

    MACH composer Cloud is a platform and API to facilitate and coordinate work
    across teams that build composable architectures using MACH technology.

    All operations available in MACH composer cloud are available through this
    API. For more information about using it in your MACH architecture, have a
    look at the [documentation
    website](https://docs.machcomposer.io/cloud/index.html).
  license:
    name: Private
    url: https://www.labdigital.nl/general-terms-and-conditions/
  termsOfService: https://www.labdigital.nl/general-terms-and-conditions/
  title: MACH composer Cloud (MCC) Public API
  version: 0.1.0
  x-logo:
    url: https://docs.machcomposer.io/_img/logo.png
    altText: MACH composer Cloud
servers:
- description: Live environment
  url: https://api.mach.cloud
security:
- OAuth2:
  - api-client:read
  - api-client:write
  - component:read
  - component:write
  - component-version:write
paths:
  /account/me:
    get:
      description: Return user information from current user
      operationId: MyAccountInformation
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyAccountInformation_200_response'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
      summary: Get user information
      tags:
      - My Account
  /organizations:
    get:
      operationId: OrganizationQuery
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationPaginator'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
      summary: List all organizations
      tags:
      - Organization Management
    post:
      operationId: OrganizationCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationDraft'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: OK
          links:
            ProjectCreateSetOrganization:
              operationId: ProjectCreate
              parameters:
                organization: $response.body#/key
            ProjectQuerySetOrganization:
              operationId: ProjectCreate
              parameters:
                organization: $response.body#/key
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
      summary: Create new organization
      tags:
      - Organization Management
  /organizations/{organization}:
    patch:
      operationId: OrganizationPatch
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            example:
            - op: replace
              path: /name
              value: New Organization Name
            schema:
              $ref: '#/components/schemas/PatchRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
      summary: Update an organization
      tags:
      - Organization Management
  /organizations/{organization}/users:
    get:
      operationId: OrganizationUserQuery
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUserPaginator'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: List all users in an organization
      tags:
      - Organization Management
  /organizations/{organization}/users/invite:
    post:
      operationId: OrganizationUserInvite
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationUserInviteDraft'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUserInvite'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Invite a user to the organization
      tags:
      - Organization Management
  /organizations/{organization}/users/invite/{id}:
    get:
      operationId: OrganizationUserInviteView
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Invite ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUserInviteData'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      security: []
      summary: View invite information
      tags:
      - Organization Management
    post:
      operationId: OrganizationUserInviteAccept
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Invite ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUserInviteData'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid invite
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Accept a user invite
      tags:
      - Organization Management
  /organizations/{organization}/projects:
    get:
      operationId: ProjectQuery
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectPaginator'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
      summary: List all projects in an organization
      tags:
      - Organization Management
    post:
      operationId: ProjectCreate
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectDraft'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Create new project in an organization
      tags:
      - Organization Management
  /organizations/{organization}/projects/{project}:
    delete:
      description: This action will delete the project and all related resources.
      operationId: ProjectDelete
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
      summary: Delete a project
      tags:
      - Organization Management
    patch:
      operationId: ProjectPatch
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            example:
            - op: replace
              path: /name
              value: New Project Name
            schema:
              $ref: '#/components/schemas/PatchRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
      summary: Update a Project
      tags:
      - Organization Management
  /organizations/{organization}/projects/{project}/api-clients:
    get:
      operationId: ApiClientQuery
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiClientPaginator'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
      summary: List all api clients
      tags:
      - API Clients
    post:
      operationId: ApiClientCreate
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiClientDraft'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiClient'
          description: New API Client created
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Create new api client
      tags:
      - API Clients
  /organizations/{organization}/projects/{project}/api-clients/{id}:
    delete:
      operationId: ApiClientDelete
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: API Client ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiClient'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
      summary: Delete an API Client
      tags:
      - API Clients
  /organizations/{organization}/projects/{project}/components:
    get:
      operationId: ComponentQuery
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentPaginator'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: List all components
      tags:
      - Components
    post:
      operationId: ComponentCreate
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentDraft'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Component'
          description: New component created
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Create component
      tags:
      - Components
  /organizations/{organization}/projects/{project}/components/{component}:
    delete:
      description: This action will delete the component and all versions.
      operationId: ComponentDelete
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Component key
        explode: false
        in: path
        name: component
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Component'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
      summary: Delete a component
      tags:
      - Components
    patch:
      operationId: ComponentPatch
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Component key
        explode: false
        in: path
        name: component
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            example:
            - op: replace
              path: /key
              value: foobar
            schema:
              $ref: '#/components/schemas/PatchRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Component'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
      summary: Patch an existing component
      tags:
      - Components
  /organizations/{organization}/projects/{project}/components/{component}/latest:
    get:
      operationId: ComponentLatestVersion
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Component key
        explode: false
        in: path
        name: component
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: branch
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentVersion'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Get last component version
      tags:
      - Components
  /organizations/{organization}/projects/{project}/components/{component}/versions:
    get:
      operationId: ComponentVersionQuery
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Component key
        explode: false
        in: path
        name: component
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentVersionPaginator'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: List all versions of a component
      tags:
      - Components
    post:
      operationId: ComponentVersionCreate
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Component key
        explode: false
        in: path
        name: component
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentVersionDraft'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentVersion'
          description: New version created
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Create component version
      tags:
      - Components
  /organizations/{organization}/projects/{project}/components/{component}/versions/{version}:
    delete:
      operationId: ComponentVersionDelete
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Component key
        explode: false
        in: path
        name: component
        required: true
        schema:
          type: string
        style: simple
      - description: Version
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentVersion'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Delete component version
      tags:
      - Components
    get:
      operationId: ComponentVersionGet
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Component key
        explode: false
        in: path
        name: component
        required: true
        schema:
          type: string
        style: simple
      - description: Version
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentVersion'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Get component version
      tags:
      - Components
  /organizations/{organization}/projects/{project}/components/{component}/versions/{version}/commits:
    get:
      operationId: ComponentVersionQueryCommits
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Component key
        explode: false
        in: path
        name: component
        required: true
        schema:
          type: string
        style: simple
      - description: Component version
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDataPaginator'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Get commits for this component version
      tags:
      - Components
    post:
      operationId: ComponentVersionPushCommits
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Component key
        explode: false
        in: path
        name: component
        required: true
        schema:
          type: string
        style: simple
      - description: Component version
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentVersionCommits'
        required: true
      responses:
        "201":
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Push commits for this component version
      tags:
      - Components
  /organizations/{organization}/projects/{project}/components/{component}/commits:
    get:
      operationId: ComponentCommitQuery
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Component key
        explode: false
        in: path
        name: component
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: "The branch to list commits for. If not provided, it will list\
          \ commits for the default branch."
        explode: true
        in: query
        name: branch
        required: false
        schema:
          type: string
        style: form
      - description: From version. This is the starting point to select commits. If
          none is selected this will default to the first version
        explode: true
        in: query
        name: from
        required: false
        schema:
          type: string
        style: form
      - description: "To version. This is the ending point to select commits. If not\
          \ provided, it will list all commits from `from` to the latest version as\
          \ returned in /organizations/{organization}/projects/{project}/components/{component}/latest."
        explode: true
        in: query
        name: to
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDataWithVersionPaginator'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: "List all commits of a component between two versions ordered by creation\
        \ date. If `to` is not provided, it will list all commits from `from` to the\
        \ latest version."
      tags:
      - Components
  /organizations/{organization}/projects/{project}/sites:
    get:
      operationId: SiteQuery
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SitePaginator'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: List all sites
      tags:
      - Sites
    post:
      operationId: SiteCreate
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteDraft'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
          description: New site created
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Create site
      tags:
      - Sites
  /organizations/{organization}/projects/{project}/sites/{site}:
    delete:
      description: This action will delete the site and all child resources.
      operationId: SiteDelete
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Site key
        explode: false
        in: path
        name: site
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Delete a site
      tags:
      - Sites
    get:
      operationId: SiteGet
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Site key
        explode: false
        in: path
        name: site
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Get an existing site
      tags:
      - Sites
    patch:
      operationId: SitePatch
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Site key
        explode: false
        in: path
        name: site
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            example:
            - op: replace
              path: /key
              value: foobar
            schema:
              $ref: '#/components/schemas/PatchRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Patch an existing site
      tags:
      - Sites
  /organizations/{organization}/projects/{project}/sites/{site}/components:
    get:
      operationId: SiteComponentSiteQuery
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Site key
        explode: false
        in: path
        name: site
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteComponentPaginator'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: List all components for the given site
      tags:
      - Sites
  /organizations/{organization}/projects/{project}/site-components:
    get:
      operationId: SiteComponentQuery
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteComponentPaginator'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: List all sites components
      tags:
      - SiteComponents
    post:
      operationId: SiteComponentCreate
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteComponentDraft'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteComponent'
          description: New site component created
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Create site component
      tags:
      - SiteComponents
  /organizations/{organization}/projects/{project}/site-components/{site-component}:
    delete:
      description: This action will delete the site component.
      operationId: SiteComponentDelete
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Site component key
        explode: false
        in: path
        name: site-component
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteComponent'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Delete a site component
      tags:
      - SiteComponents
    get:
      operationId: SiteComponentGet
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Site component key
        explode: false
        in: path
        name: site-component
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteComponent'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Get an existing site component
      tags:
      - SiteComponents
    patch:
      operationId: SiteComponentPatch
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Site component key
        explode: false
        in: path
        name: site-component
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            example:
            - op: replace
              path: /key
              value: foobar
            schema:
              $ref: '#/components/schemas/PatchRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteComponent'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Patch an existing site component
      tags:
      - SiteComponents
components:
  parameters:
    OrganizationParam:
      description: Organization Key
      explode: false
      in: path
      name: organization
      required: true
      schema:
        example: my-organization
        type: string
      style: simple
    ProjectParam:
      description: Project Key
      explode: false
      in: path
      name: project
      required: true
      schema:
        example: my-project
        type: string
      style: simple
    OffsetParam:
      explode: true
      in: query
      name: offset
      required: false
      schema:
        default: 0
        type: integer
      style: form
    LimitParam:
      explode: true
      in: query
      name: limit
      required: false
      schema:
        type: integer
      style: form
    SortParam:
      explode: true
      in: query
      name: sort
      required: false
      schema:
        items:
          type: string
        type: array
      style: form
    SiteParam:
      description: Site key
      explode: false
      in: path
      name: site
      required: true
      schema:
        type: string
      style: simple
    SiteComponentParam:
      description: Site component key
      explode: false
      in: path
      name: site-component
      required: true
      schema:
        type: string
      style: simple
  responses:
    ErrorResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Invalid request
    ErrorUnauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorUnauthorized'
      description: Unauthorized
    ErrorForbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorForbidden'
      description: Forbidden
  schemas:
    ErrorObject:
      example:
        code: code
        message: message
      properties:
        code:
          type: string
        message:
          type: string
      required:
      - code
      - message
      type: object
    Error:
      example:
        summary: summary
        description: description
        errors:
        - code: code
          message: message
        - code: code
          message: message
        status: 0
      properties:
        status:
          type: integer
        summary:
          type: string
        description:
          type: string
        errors:
          items:
            $ref: '#/components/schemas/ErrorObject'
          type: array
      required:
      - status
      - summary
      type: object
    Paginator:
      properties:
        count:
          description: Number of items in the current page
          type: integer
        total:
          description: Total number of items found
          format: int64
          type: integer
        offset:
          default: 0
          type: integer
        limit:
          default: 20
          type: integer
      required:
      - count
      - limit
      - offset
      - results
      - total
      type: object
    BaseResource:
      properties:
        id:
          format: uuid
          type: string
        created_at:
          format: date-time
          type: string
      required:
      - created_at
      - id
      type: object
    Organization:
      allOf:
      - $ref: '#/components/schemas/BaseResource'
      - properties:
          key:
            description: The organization key (must be unique)
            type: string
          name:
            description: The name of the organization
            type: string
        required:
        - key
        - name
        type: object
      example:
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        key: key
    OrganizationPaginator:
      allOf:
      - $ref: '#/components/schemas/Paginator'
      - properties:
          results:
            items:
              $ref: '#/components/schemas/Organization'
            type: array
        type: object
      example:
        total: 6
        offset: 1
        count: 0
        limit: 5
        results:
        - name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          key: key
        - name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          key: key
    OrganizationDraft:
      example:
        name: name
        key: key
      properties:
        key:
          description: The organization key (must be unique)
          type: string
        name:
          description: The name of the organization
          type: string
      required:
      - key
      - name
      type: object
    JSONPatchRequestAddReplaceTest:
      additionalProperties: false
      properties:
        path:
          description: A JSON Pointer path.
          type: string
        value:
          description: "The value to add, replace or test."
        op:
          description: The operation to perform.
          enum:
          - add
          - replace
          - test
          type: string
      required:
      - op
      - path
      - value
      type: object
    JSONPatchRequestRemove:
      additionalProperties: false
      properties:
        path:
          description: A JSON Pointer path.
          type: string
        op:
          description: The operation to perform.
          enum:
          - remove
          type: string
      required:
      - op
      - path
      type: object
    JSONPatchRequestMoveCopy:
      additionalProperties: false
      properties:
        path:
          description: A JSON Pointer path.
          type: string
        op:
          description: The operation to perform.
          enum:
          - move
          - copy
          type: string
      required:
      - from
      - op
      - path
      type: object
    PatchRequest:
      description: JSON Patch is specified in RFC 6902 from the IETF.
      items:
        $ref: '#/components/schemas/PatchRequest_inner'
      type: array
    OrganizationUser:
      example:
        organization_key: organization_key
        projects:
        - name: name
          scopes:
          - scopes
          - scopes
          key: key
        - name: name
          scopes:
          - scopes
          - scopes
          key: key
        avatar_url: avatar_url
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        organization_name: organization_name
        organization_scopes:
        - organization_scopes
        - organization_scopes
        client_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        email: email
      properties:
        client_id:
          format: uuid
          type: string
        created_at:
          format: date-time
          type: string
        name:
          description: Name of the user
          type: string
        email:
          description: E-mail address of the user
          type: string
        avatar_url:
          description: The avatar profile image url of the user
          type: string
        organization_key:
          description: Key of the organization
          type: string
        organization_name:
          description: Name of the organization
          type: string
        organization_scopes:
          items:
            type: string
          type: array
        projects:
          items:
            $ref: '#/components/schemas/OrganizationUser_projects_inner'
          type: array
      required:
      - email
      type: object
    OrganizationUserPaginator:
      allOf:
      - $ref: '#/components/schemas/Paginator'
      - properties:
          results:
            items:
              $ref: '#/components/schemas/OrganizationUser'
            type: array
        type: object
      example:
        total: 6
        offset: 1
        count: 0
        limit: 5
        results:
        - organization_key: organization_key
          projects:
          - name: name
            scopes:
            - scopes
            - scopes
            key: key
          - name: name
            scopes:
            - scopes
            - scopes
            key: key
          avatar_url: avatar_url
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          organization_name: organization_name
          organization_scopes:
          - organization_scopes
          - organization_scopes
          client_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          email: email
        - organization_key: organization_key
          projects:
          - name: name
            scopes:
            - scopes
            - scopes
            key: key
          - name: name
            scopes:
            - scopes
            - scopes
            key: key
          avatar_url: avatar_url
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          organization_name: organization_name
          organization_scopes:
          - organization_scopes
          - organization_scopes
          client_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          email: email
    OrganizationUserInviteDraft:
      example:
        role: owner
        project_key: project_key
        email: email
      properties:
        email:
          description: E-mail address of the user
          format: email
          type: string
        project_key:
          description: Key of the project to invite user to
          type: string
        role:
          description: Role for the user
          enum:
          - owner
          - member
          - viewer
          type: string
      required:
      - email
      type: object
    OrganizationUserInvite:
      example:
        role: owner
        project_key: project_key
        created_by: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        email: email
      properties:
        created_by:
          format: uuid
          type: string
        email:
          description: E-mail address of the user
          format: email
          type: string
        project_key:
          description: Key of the project to invite user to
          type: string
        role:
          description: Role for the user
          enum:
          - owner
          - member
          - viewer
          type: string
      required:
      - email
      type: object
    OrganizationUserInviteData:
      example:
        valid: true
        organization:
          name: ACME Ltd.
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        created_by: John Doe
      properties:
        id:
          format: uuid
          type: string
        valid:
          description: |
            If the invite is still valid. False if the invite expired or
            was already used.
          type: boolean
        created_by:
          example: John Doe
          type: string
        organization:
          $ref: '#/components/schemas/OrganizationUserInviteData_organization'
      required:
      - created_by
      - id
      - organization
      type: object
    Project:
      allOf:
      - $ref: '#/components/schemas/BaseResource'
      - properties:
          key:
            description: The organization key (must be unique)
            type: string
          name:
            description: The name of the organization
            type: string
          description:
            description: description about the api client
            type: string
        required:
        - key
        - name
        type: object
      example:
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        description: description
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        key: key
    ProjectPaginator:
      allOf:
      - $ref: '#/components/schemas/Paginator'
      - properties:
          results:
            items:
              $ref: '#/components/schemas/Project'
            type: array
        type: object
      example:
        total: 6
        offset: 1
        count: 0
        limit: 5
        results:
        - name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          key: key
        - name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          key: key
    ProjectDraft:
      example:
        name: name
        key: key
      properties:
        key:
          description: The organization key (must be unique)
          type: string
        name:
          description: The name of the organization
          type: string
      required:
      - key
      - name
      type: object
    ApiClient:
      allOf:
      - $ref: '#/components/schemas/BaseResource'
      - properties:
          description:
            description: description about the api client
            type: string
          client_id:
            description: the client id
            type: string
          client_secret:
            description: the client id
            type: string
          last_used_at:
            format: date-time
            type: string
          scope:
            description: Scope
            items:
              type: string
            type: array
        required:
        - client_id
        - client_secret
        - scope
        type: object
      example:
        last_used_at: 2000-01-23T04:56:07.000+00:00
        scope:
        - scope
        - scope
        created_at: 2000-01-23T04:56:07.000+00:00
        description: description
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        client_secret: client_secret
        client_id: client_id
    ApiClientPaginator:
      allOf:
      - $ref: '#/components/schemas/Paginator'
      - properties:
          results:
            items:
              $ref: '#/components/schemas/ApiClient'
            type: array
        type: object
      example:
        total: 6
        offset: 1
        count: 0
        limit: 5
        results:
        - last_used_at: 2000-01-23T04:56:07.000+00:00
          scope:
          - scope
          - scope
          created_at: 2000-01-23T04:56:07.000+00:00
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          client_secret: client_secret
          client_id: client_id
        - last_used_at: 2000-01-23T04:56:07.000+00:00
          scope:
          - scope
          - scope
          created_at: 2000-01-23T04:56:07.000+00:00
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          client_secret: client_secret
          client_id: client_id
    ApiClientDraft:
      example:
        scope:
        - scope
        - scope
        description: description
      properties:
        description:
          description: description about the api client
          type: string
        scope:
          description: Scope
          items:
            type: string
          type: array
      type: object
    Component:
      allOf:
      - $ref: '#/components/schemas/BaseResource'
      - properties:
          key:
            description: key of the component
            type: string
          name:
            description: name of the component
            type: string
          description:
            description: short description of the component
            type: string
        type: object
      example:
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        description: description
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        key: key
    ComponentPaginator:
      allOf:
      - $ref: '#/components/schemas/Paginator'
      - properties:
          results:
            items:
              $ref: '#/components/schemas/Component'
            type: array
        type: object
      example:
        total: 6
        offset: 1
        count: 0
        limit: 5
        results:
        - name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          key: key
        - name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          key: key
    ComponentDraft:
      example:
        name: name
        description: description
        key: key
      properties:
        key:
          type: string
        name:
          type: string
        description:
          type: string
      required:
      - key
      - name
      type: object
    ComponentVersion:
      allOf:
      - $ref: '#/components/schemas/BaseResource'
      - properties:
          component:
            description: key of the component
            type: string
          version:
            description: version of the component
            type: string
          branch:
            description: branch of the version
            type: string
        required:
        - component
        - version
        type: object
      example:
        component: component
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        version: version
        branch: branch
    ComponentVersionPaginator:
      allOf:
      - $ref: '#/components/schemas/Paginator'
      - properties:
          results:
            items:
              $ref: '#/components/schemas/ComponentVersion'
            type: array
        type: object
      example:
        total: 6
        offset: 1
        count: 0
        limit: 5
        results:
        - component: component
          created_at: 2000-01-23T04:56:07.000+00:00
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          version: version
          branch: branch
        - component: component
          created_at: 2000-01-23T04:56:07.000+00:00
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          version: version
          branch: branch
    ComponentVersionDraft:
      example:
        version: version
        branch: branch
      properties:
        version:
          type: string
        branch:
          type: string
      required:
      - branch
      - version
      type: object
    CommitDataAuthor:
      example:
        date: 2000-01-23T04:56:07.000+00:00
        name: name
        email: email
      properties:
        name:
          type: string
        email:
          type: string
        date:
          format: date-time
          type: string
      required:
      - date
      - email
      - name
      type: object
    CommitDataDraft:
      properties:
        commit:
          type: string
        parents:
          items:
            type: string
          type: array
        subject:
          type: string
        author:
          $ref: '#/components/schemas/CommitDataAuthor'
        committer:
          $ref: '#/components/schemas/CommitDataAuthor'
      required:
      - author
      - commit
      - committer
      - parents
      - subject
      type: object
    CommitData:
      allOf:
      - $ref: '#/components/schemas/CommitDataDraft'
      - properties:
          created_at:
            format: date-time
            type: string
        type: object
      example:
        committer:
          date: 2000-01-23T04:56:07.000+00:00
          name: name
          email: email
        subject: subject
        author:
          date: 2000-01-23T04:56:07.000+00:00
          name: name
          email: email
        commit: commit
        created_at: 2000-01-23T04:56:07.000+00:00
        parents:
        - parents
        - parents
    CommitDataPaginator:
      allOf:
      - $ref: '#/components/schemas/Paginator'
      - properties:
          results:
            items:
              $ref: '#/components/schemas/CommitData'
            type: array
        type: object
      example:
        total: 6
        offset: 1
        count: 0
        limit: 5
        results:
        - committer:
            date: 2000-01-23T04:56:07.000+00:00
            name: name
            email: email
          subject: subject
          author:
            date: 2000-01-23T04:56:07.000+00:00
            name: name
            email: email
          commit: commit
          created_at: 2000-01-23T04:56:07.000+00:00
          parents:
          - parents
          - parents
        - committer:
            date: 2000-01-23T04:56:07.000+00:00
            name: name
            email: email
          subject: subject
          author:
            date: 2000-01-23T04:56:07.000+00:00
            name: name
            email: email
          commit: commit
          created_at: 2000-01-23T04:56:07.000+00:00
          parents:
          - parents
          - parents
    ComponentVersionCommits:
      example:
        commits:
        - committer:
            date: 2000-01-23T04:56:07.000+00:00
            name: name
            email: email
          subject: subject
          author:
            date: 2000-01-23T04:56:07.000+00:00
            name: name
            email: email
          commit: commit
          created_at: 2000-01-23T04:56:07.000+00:00
          parents:
          - parents
          - parents
        - committer:
            date: 2000-01-23T04:56:07.000+00:00
            name: name
            email: email
          subject: subject
          author:
            date: 2000-01-23T04:56:07.000+00:00
            name: name
            email: email
          commit: commit
          created_at: 2000-01-23T04:56:07.000+00:00
          parents:
          - parents
          - parents
      properties:
        commits:
          items:
            $ref: '#/components/schemas/CommitData'
          type: array
      required:
      - commits
      type: object
    CommitDataWithVersion:
      allOf:
      - $ref: '#/components/schemas/CommitData'
      - properties:
          version:
            format: string
            type: string
          branch:
            format: string
            type: string
        type: object
      example:
        version: version
        branch: branch
    CommitDataWithVersionPaginator:
      allOf:
      - $ref: '#/components/schemas/Paginator'
      - properties:
          results:
            items:
              $ref: '#/components/schemas/CommitDataWithVersion'
            type: array
        type: object
      example:
        total: 6
        offset: 1
        count: 0
        limit: 5
        results:
        - version: version
          branch: branch
        - version: version
          branch: branch
    BaseSite:
      properties:
        key:
          description: The key for the site
          type: string
        name:
          description: The name for the site
          type: string
        description:
          description: The description for the site
          type: string
      required:
      - key
      - name
      type: object
    Site:
      allOf:
      - $ref: '#/components/schemas/BaseResource'
      - $ref: '#/components/schemas/BaseSite'
      example:
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        description: description
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        key: key
      type: object
    SitePaginator:
      allOf:
      - $ref: '#/components/schemas/Paginator'
      - properties:
          results:
            items:
              $ref: '#/components/schemas/Site'
            type: array
        type: object
      example:
        total: 6
        offset: 1
        count: 0
        limit: 5
        results:
        - name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          key: key
        - name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          key: key
    SiteDraft:
      allOf:
      - $ref: '#/components/schemas/BaseSite'
      example:
        name: name
        description: description
        key: key
      type: object
    BaseSiteComponent:
      properties:
        key:
          description: key of the site component
          type: string
        name:
          description: name of the site component
          type: string
      required:
      - key
      - name
      type: object
    SiteComponent:
      allOf:
      - $ref: '#/components/schemas/BaseResource'
      - $ref: '#/components/schemas/BaseSiteComponent'
      - properties:
          site_id:
            description: id of the site
            type: string
          component_id:
            description: id of the component
            type: string
        required:
        - component_id
        - site_id
        type: object
      example:
        component_id: component_id
        name: name
        site_id: site_id
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        key: key
      type: object
    SiteComponentPaginator:
      allOf:
      - $ref: '#/components/schemas/Paginator'
      - properties:
          results:
            items:
              $ref: '#/components/schemas/SiteComponent'
            type: array
        type: object
      example:
        total: 6
        offset: 1
        count: 0
        limit: 5
        results:
        - component_id: component_id
          name: name
          site_id: site_id
          created_at: 2000-01-23T04:56:07.000+00:00
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          key: key
        - component_id: component_id
          name: name
          site_id: site_id
          created_at: 2000-01-23T04:56:07.000+00:00
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          key: key
    SiteComponentDraft:
      allOf:
      - $ref: '#/components/schemas/BaseSiteComponent'
      - properties:
          site_key:
            description: key of the site
            type: string
          component_key:
            description: key of the component
            type: string
        required:
        - component_key
        - site_key
        type: object
      example:
        site_key: site_key
        component_key: component_key
        name: name
        key: key
      type: object
    MyAccountInformation_200_response:
      example:
        avatar_url: avatar_url
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        email: email
      properties:
        created_at:
          format: date-time
          type: string
        name:
          description: Name of the user
          type: string
        email:
          description: E-mail address of the user
          type: string
        avatar_url:
          type: string
    ErrorUnauthorized:
      example:
        message: message
      properties:
        message:
          type: string
      title: ErrorUnauthorized
      type: object
    ErrorForbidden:
      example:
        summary: summary
        description: description
        message: message
        status: 6
      properties:
        status:
          type: integer
        summary:
          type: string
        description:
          type: string
        message:
          type: string
      title: ErrorForbidden
      type: object
    PatchRequest_inner:
      oneOf:
      - $ref: '#/components/schemas/JSONPatchRequestAddReplaceTest'
      - $ref: '#/components/schemas/JSONPatchRequestRemove'
      - $ref: '#/components/schemas/JSONPatchRequestMoveCopy'
    OrganizationUser_projects_inner:
      example:
        name: name
        scopes:
        - scopes
        - scopes
        key: key
      properties:
        name:
          type: string
        key:
          type: string
        scopes:
          items:
            type: string
          type: array
      type: object
    OrganizationUserInviteData_organization:
      example:
        name: ACME Ltd.
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        name:
          example: ACME Ltd.
          type: string
      required:
      - id
      - name
      type: object
  securitySchemes:
    OAuth2:
      flows:
        authorizationCode:
          authorizationUrl: http://localhost:3000
          scopes:
            api: Grants complete read/write access to the API
          tokenUrl: http://localhost:3000/oauth/token
          x-usePkce:
            disableManualConfiguration: false
            hideClientSecretInput: false
        clientCredentials:
          scopes:
            api: Grants complete read/write access to the API
          tokenUrl: http://localhost:3000/oauth/token
      type: oauth2
