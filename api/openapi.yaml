openapi: 3.0.0
info:
  contact:
    email: mach@labdigital.nl
    name: MACH composer support
    url: https://docs.machcomposer.io/
  description: "# Introduction\n\nMACH composer Cloud is a platform and API to facilitate\
    \ and coordinate work\nacross teams that build composable architectures using\
    \ MACH technology. \n\nAll operations available in MACH composer cloud are available\
    \ through this\nAPI. For more information about using it in your MACH architecture,\
    \ have a\nlook at the [documentation\nwebsite](https://docs.machcomposer.io/cloud/index.html).\n"
  title: MACH composer Cloud (MCC) Public API
  version: 0.1.0
  x-logo:
    url: https://docs.machcomposer.io/_img/logo.png
    altText: MACH composer Cloud
servers:
- description: Live environment
  url: https://api.mach.cloud
security:
- bearerAuth:
  - api-client:read
  - api-client:write
  - component:read
  - component:write
  - component-version:write
paths:
  /authorize:
    get:
      operationId: Authorize
      parameters:
      - explode: true
        in: query
        name: response_type
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: scope
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: redirect_uri
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: state
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: client_id
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: code_challenge
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: code_challenge_method
        required: true
        schema:
          example: S256
          type: string
        style: form
      - explode: true
        in: query
        name: provider
        required: false
        schema:
          type: string
        style: form
      responses:
        "307":
          description: OK
      summary: Start authorization flow
      tags:
      - Auth
    servers:
    - description: Production server
      url: https://auth.mach.cloud
  /oauth/token:
    post:
      operationId: GetAuthToken
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenBody'
        required: true
      responses:
        "200":
          description: OK
      security: []
      summary: Return a new token
      tags:
      - Auth
    servers:
    - description: Production server
      url: https://auth.mach.cloud
  /oauth/introspect:
    post:
      operationId: IntrospectToken
      parameters:
      - explode: true
        in: query
        name: token
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Introspect an existing token
      tags:
      - Auth
    servers:
    - description: Production server
      url: https://auth.mach.cloud
  /account/me:
    get:
      operationId: MyAccountInformation
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyAccountInformation_200_response'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
      summary: Return user information from current user
      tags:
      - Account Management
  /account/organizations:
    get:
      operationId: OrganizationQuery
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationPaginator'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
      summary: List all organizations
      tags:
      - Account Management
    post:
      operationId: OrganizationCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationDraft'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: OK
          links:
            ProjectCreateSetOrganization:
              operationId: ProjectCreate
              parameters:
                organization: $response.body#/key
            ProjectQuerySetOrganization:
              operationId: ProjectCreate
              parameters:
                organization: $response.body#/key
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
      summary: Create new organization
      tags:
      - Account Management
  /account/organizations/{organization}/users:
    get:
      operationId: OrganizationUserQuery
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUserPaginator'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
      summary: List all users in an organization
      tags:
      - Account Management
    post:
      operationId: OrganizationUserInvite
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationUserInviteDraft'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUserInvite'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Add user to an organization
      tags:
      - Account Management
  /account/organizations/{organization}/projects:
    get:
      operationId: ProjectQuery
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectPaginator'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
      summary: List all projects in an organization
      tags:
      - Account Management
    post:
      operationId: ProjectCreate
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectDraft'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Create new project in an organization
      tags:
      - Account Management
  /{organization}/projects/{project}/api-clients:
    get:
      operationId: ApiClientQuery
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiClientPaginator'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
      security:
      - bearerAuth:
        - api-client:read
      summary: List all api clients
      tags:
      - API Clients
    post:
      operationId: ApiClientCreate
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiClientDraft'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiClient'
          description: New API Client created
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      security:
      - bearerAuth:
        - api-client:write
      summary: Create new api client
      tags:
      - API Clients
  /{organization}/projects/{project}/components:
    get:
      operationId: ComponentQuery
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentPaginator'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: List all components
      tags:
      - Components
    post:
      operationId: ComponentCreate
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentDraft'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Component'
          description: New component created
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Create component
      tags:
      - Components
  /{organization}/projects/{project}/components/{component}/latest:
    get:
      operationId: ComponentLatestVersion
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Component key
        explode: false
        in: path
        name: component
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: branch
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentVersion'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Get last component version.
      tags:
      - Components
  /{organization}/projects/{project}/components/{component}/versions:
    get:
      operationId: ComponentVersionQuery
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Component key
        explode: false
        in: path
        name: component
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentVersionPaginator'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: List all versions of a component
      tags:
      - Components
    post:
      operationId: ComponentVersionCreate
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Component key
        explode: false
        in: path
        name: component
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentVersionDraft'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentVersion'
          description: New version created
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Create component
      tags:
      - Components
  /{organization}/projects/{project}/components/{component}/versions/{version}/commits:
    get:
      operationId: ComponentVersionQueryCommits
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Component key
        explode: false
        in: path
        name: component
        required: true
        schema:
          type: string
        style: simple
      - description: Component version
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitDataPaginator'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Get commits for this component version
      tags:
      - Components
    post:
      operationId: ComponentVersionPushCommits
      parameters:
      - description: Organization Key
        explode: false
        in: path
        name: organization
        required: true
        schema:
          example: my-organization
          type: string
        style: simple
      - description: Project Key
        explode: false
        in: path
        name: project
        required: true
        schema:
          example: my-project
          type: string
        style: simple
      - description: Component key
        explode: false
        in: path
        name: component
        required: true
        schema:
          type: string
        style: simple
      - description: Component version
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentVersionCommits'
        required: true
      responses:
        "201":
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
          description: Forbidden
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Push commits for this component version
      tags:
      - Components
components:
  parameters:
    organizationParam:
      description: Organization Key
      explode: false
      in: path
      name: organization
      required: true
      schema:
        example: my-organization
        type: string
      style: simple
    projectParam:
      description: Project Key
      explode: false
      in: path
      name: project
      required: true
      schema:
        example: my-project
        type: string
      style: simple
    OffsetParam:
      explode: true
      in: query
      name: offset
      required: false
      schema:
        default: 0
        type: integer
      style: form
    LimitParam:
      explode: true
      in: query
      name: limit
      required: false
      schema:
        type: integer
      style: form
    SortParam:
      explode: true
      in: query
      name: sort
      required: false
      schema:
        items:
          type: string
        type: array
      style: form
  responses:
    ErrorResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Invalid request
    ErrorUnauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorUnauthorized'
      description: Unauthorized
    ErrorForbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorForbidden'
      description: Forbidden
  schemas:
    TokenBody:
      properties:
        grant_type:
          type: string
        client_id:
          type: string
        code_verifier:
          type: string
        code:
          type: string
        redirect_uri:
          type: string
        refresh_token:
          type: string
      required:
      - client_id
      - grant_type
      type: object
    ErrorObject:
      properties:
        code:
          type: string
        message:
          type: string
      required:
      - code
      - message
      type: object
    Error:
      properties:
        status:
          type: int
        summary:
          type: string
        description:
          type: string
        errors:
          items:
            $ref: '#/components/schemas/ErrorObject'
          type: array
      required:
      - status
      - summary
      type: object
    Paginator:
      properties:
        count:
          description: Number of items in the current page
          type: number
        total:
          description: Total number of items found
          type: number
        offset:
          default: 0
          type: number
        limit:
          default: 20
          type: number
      required:
      - count
      - limit
      - offset
      - results
      - total
      type: object
    BaseResource:
      properties:
        created_at:
          format: date-time
          type: string
      required:
      - created_at
      type: object
    Organization:
      allOf:
      - $ref: '#/components/schemas/BaseResource'
      - $ref: '#/components/schemas/Organization_allOf'
    OrganizationPaginator:
      allOf:
      - $ref: '#/components/schemas/Paginator'
      - $ref: '#/components/schemas/OrganizationPaginator_allOf'
    OrganizationDraft:
      example:
        name: name
        key: key
      properties:
        key:
          description: The organization key (must be unique)
          type: string
        name:
          description: The name of the organization
          type: string
      required:
      - key
      - name
      type: object
    OrganizationUser:
      properties:
        client_id:
          format: uuid
          type: string
        created_at:
          format: date-time
          type: string
        name:
          description: Name of the user
          type: string
        email:
          description: E-mail address of the user
          type: string
        avatar_url:
          description: The avatar profile image url of the user
          type: string
        organization_key:
          description: Key of the organization
          type: string
        organization_name:
          description: Name of the organization
          type: string
        organization_scopes:
          items:
            type: string
          type: array
        projects:
          items:
            $ref: '#/components/schemas/OrganizationUser_projects_inner'
          type: array
      required:
      - email
      type: object
    OrganizationUserPaginator:
      allOf:
      - $ref: '#/components/schemas/Paginator'
      - $ref: '#/components/schemas/OrganizationUserPaginator_allOf'
    OrganizationUserInviteDraft:
      example:
        email: email
      properties:
        email:
          description: E-mail address of the user
          type: string
      required:
      - email
      type: object
    OrganizationUserInvite:
      example:
        email: email
      properties:
        email:
          description: E-mail address of the user
          type: string
      required:
      - email
      type: object
    Project:
      allOf:
      - $ref: '#/components/schemas/BaseResource'
      - $ref: '#/components/schemas/Project_allOf'
    ProjectPaginator:
      allOf:
      - $ref: '#/components/schemas/Paginator'
      - $ref: '#/components/schemas/ProjectPaginator_allOf'
    ProjectDraft:
      example:
        name: name
        key: key
      properties:
        key:
          description: The organization key (must be unique)
          type: string
        name:
          description: The name of the organization
          type: string
      required:
      - key
      - name
      type: object
    ApiClient:
      allOf:
      - $ref: '#/components/schemas/BaseResource'
      - $ref: '#/components/schemas/ApiClient_allOf'
    ApiClientPaginator:
      allOf:
      - $ref: '#/components/schemas/Paginator'
      - $ref: '#/components/schemas/ApiClientPaginator_allOf'
    ApiClientDraft:
      example:
        scope:
        - scope
        - scope
        description: description
      properties:
        description:
          description: description about the api client
          type: string
        scope:
          description: Scope
          items:
            type: string
          type: array
      type: object
    Component:
      allOf:
      - $ref: '#/components/schemas/BaseResource'
      - $ref: '#/components/schemas/Component_allOf'
    ComponentPaginator:
      allOf:
      - $ref: '#/components/schemas/Paginator'
      - $ref: '#/components/schemas/ComponentPaginator_allOf'
    ComponentDraft:
      example:
        key: key
      properties:
        key:
          type: string
      required:
      - key
      type: object
    ComponentVersion:
      allOf:
      - $ref: '#/components/schemas/BaseResource'
      - $ref: '#/components/schemas/ComponentVersion_allOf'
    ComponentVersionPaginator:
      allOf:
      - $ref: '#/components/schemas/Paginator'
      - $ref: '#/components/schemas/ComponentVersionPaginator_allOf'
    ComponentVersionDraft:
      example:
        component: component
        version: version
        branch: branch
      properties:
        component:
          type: string
        version:
          type: string
        branch:
          type: string
      required:
      - branch
      - component
      - version
      type: object
    CommitDataAuthor:
      properties:
        name:
          type: string
        email:
          type: string
        date:
          format: date-time
          type: string
      required:
      - date
      - email
      - name
      type: object
    CommitDataDraft:
      properties:
        commit:
          type: string
        parents:
          items:
            type: string
          type: array
        subject:
          type: string
        author:
          $ref: '#/components/schemas/CommitDataAuthor'
        committer:
          $ref: '#/components/schemas/CommitDataAuthor'
      required:
      - author
      - commit
      - committer
      - parent
      - subject
      type: object
    CommitData:
      allOf:
      - $ref: '#/components/schemas/CommitDataDraft'
      - $ref: '#/components/schemas/CommitData_allOf'
    CommitDataPaginator:
      allOf:
      - $ref: '#/components/schemas/Paginator'
      - $ref: '#/components/schemas/CommitDataPaginator_allOf'
    ComponentVersionCommits:
      example:
        commits:
        - null
        - null
      properties:
        commits:
          items:
            $ref: '#/components/schemas/CommitData'
          type: array
      required:
      - commits
      type: object
    MyAccountInformation_200_response:
      example:
        avatar_url: avatar_url
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        email: email
      properties:
        created_at:
          format: date-time
          type: string
        name:
          description: Name of the user
          type: string
        email:
          description: E-mail address of the user
          type: string
        avatar_url:
          type: string
    ErrorUnauthorized:
      properties:
        message:
          type: string
      title: ErrorUnauthorized
      type: object
    ErrorForbidden:
      properties:
        status:
          type: int
        summary:
          type: string
        description:
          type: string
      required:
      - description
      - status
      - summary
      title: ErrorForbidden
      type: object
    Organization_allOf:
      properties:
        key:
          description: The organization key (must be unique)
          type: string
        name:
          description: The name of the organization
          type: string
      required:
      - key
      - name
      type: object
      example: null
    OrganizationPaginator_allOf:
      properties:
        results:
          items:
            $ref: '#/components/schemas/Organization'
          type: array
      type: object
      example: null
    OrganizationUser_projects_inner:
      properties:
        name:
          type: string
        key:
          type: string
        scopes:
          items:
            type: string
          type: array
      type: object
    OrganizationUserPaginator_allOf:
      properties:
        results:
          items:
            $ref: '#/components/schemas/OrganizationUser'
          type: array
      type: object
      example: null
    Project_allOf:
      properties:
        key:
          description: The organization key (must be unique)
          type: string
        name:
          description: The name of the organization
          type: string
        description:
          description: description about the api client
          type: string
      required:
      - key
      - name
      type: object
      example: null
    ProjectPaginator_allOf:
      properties:
        results:
          items:
            $ref: '#/components/schemas/Project'
          type: array
      type: object
      example: null
    ApiClient_allOf:
      properties:
        description:
          description: description about the api client
          type: string
        client_id:
          description: the client id
          type: string
        client_secret:
          description: the client id
          type: string
        last_used_at:
          format: date-time
          type: string
        scope:
          description: Scope
          items:
            type: string
          type: array
      required:
      - client_id
      - client_secret
      - scope
      type: object
      example: null
    ApiClientPaginator_allOf:
      properties:
        results:
          items:
            $ref: '#/components/schemas/ApiClient'
          type: array
      type: object
      example: null
    Component_allOf:
      properties:
        key:
          description: key of the component
          type: string
      type: object
      example: null
    ComponentPaginator_allOf:
      properties:
        results:
          items:
            $ref: '#/components/schemas/Component'
          type: array
      type: object
      example: null
    ComponentVersion_allOf:
      properties:
        component:
          description: key of the component
          type: string
        version:
          description: version of the component
          type: string
        branch:
          description: branch of the version
          type: string
      required:
      - component
      - version
      type: object
      example: null
    ComponentVersionPaginator_allOf:
      properties:
        results:
          items:
            $ref: '#/components/schemas/ComponentVersion'
          type: array
      type: object
      example: null
    CommitData_allOf:
      properties:
        created_at:
          format: date-time
          type: string
      type: object
      example: null
    CommitDataPaginator_allOf:
      properties:
        results:
          items:
            $ref: '#/components/schemas/CommitData'
          type: array
      type: object
      example: null
  securitySchemes:
    bearerAuth:
      bearerFormat: Opaque token
      scheme: bearer
      type: http
    basicAuth:
      scheme: basic
      type: http
