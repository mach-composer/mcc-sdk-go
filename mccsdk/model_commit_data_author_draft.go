/*
MACH composer Cloud (MCC) Public API

# Introduction  MACH composer Cloud is a platform and API to facilitate and coordinate work across teams that build composable architectures using MACH technology.  All operations available in MACH composer cloud are available through this API. For more information about using it in your MACH architecture, have a look at the [documentation website](https://docs.machcomposer.io/cloud/index.html).

API version: 0.1.0
Contact: mach@labdigital.nl
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mccsdk

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the CommitDataAuthorDraft type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommitDataAuthorDraft{}

// CommitDataAuthorDraft struct for CommitDataAuthorDraft
type CommitDataAuthorDraft struct {
	Name  string    `json:"name"`
	Email string    `json:"email"`
	Date  time.Time `json:"date"`
}

type _CommitDataAuthorDraft CommitDataAuthorDraft

// NewCommitDataAuthorDraft instantiates a new CommitDataAuthorDraft object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitDataAuthorDraft(name string, email string, date time.Time) *CommitDataAuthorDraft {
	this := CommitDataAuthorDraft{}
	this.Name = name
	this.Email = email
	this.Date = date
	return &this
}

// NewCommitDataAuthorDraftWithDefaults instantiates a new CommitDataAuthorDraft object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitDataAuthorDraftWithDefaults() *CommitDataAuthorDraft {
	this := CommitDataAuthorDraft{}
	return &this
}

// GetName returns the Name field value
func (o *CommitDataAuthorDraft) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CommitDataAuthorDraft) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CommitDataAuthorDraft) SetName(v string) {
	o.Name = v
}

// GetEmail returns the Email field value
func (o *CommitDataAuthorDraft) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *CommitDataAuthorDraft) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *CommitDataAuthorDraft) SetEmail(v string) {
	o.Email = v
}

// GetDate returns the Date field value
func (o *CommitDataAuthorDraft) GetDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *CommitDataAuthorDraft) GetDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *CommitDataAuthorDraft) SetDate(v time.Time) {
	o.Date = v
}

func (o CommitDataAuthorDraft) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommitDataAuthorDraft) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["email"] = o.Email
	toSerialize["date"] = o.Date
	return toSerialize, nil
}

func (o *CommitDataAuthorDraft) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"email",
		"date",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommitDataAuthorDraft := _CommitDataAuthorDraft{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommitDataAuthorDraft)

	if err != nil {
		return err
	}

	*o = CommitDataAuthorDraft(varCommitDataAuthorDraft)

	return err
}

type NullableCommitDataAuthorDraft struct {
	value *CommitDataAuthorDraft
	isSet bool
}

func (v NullableCommitDataAuthorDraft) Get() *CommitDataAuthorDraft {
	return v.value
}

func (v *NullableCommitDataAuthorDraft) Set(val *CommitDataAuthorDraft) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitDataAuthorDraft) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitDataAuthorDraft) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitDataAuthorDraft(val *CommitDataAuthorDraft) *NullableCommitDataAuthorDraft {
	return &NullableCommitDataAuthorDraft{value: val, isSet: true}
}

func (v NullableCommitDataAuthorDraft) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitDataAuthorDraft) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
