/*
MACH composer Cloud (MCC) Public API

# Introduction  MACH composer Cloud is a platform and API to facilitate and coordinate work across teams that build composable architectures using MACH technology.  All operations available in MACH composer cloud are available through this API. For more information about using it in your MACH architecture, have a look at the [documentation website](https://docs.machcomposer.io/cloud/index.html).

API version: 0.1.0
Contact: mach@labdigital.nl
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mccsdk

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ComponentVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComponentVersion{}

// ComponentVersion struct for ComponentVersion
type ComponentVersion struct {
	Id        string    `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	// key of the component
	Component string `json:"component"`
	// version of the component
	Version string `json:"version"`
	// branch of the version
	Branch               *string `json:"branch,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ComponentVersion ComponentVersion

// NewComponentVersion instantiates a new ComponentVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponentVersion(id string, createdAt time.Time, component string, version string) *ComponentVersion {
	this := ComponentVersion{}
	this.Id = id
	this.CreatedAt = createdAt
	this.Component = component
	this.Version = version
	return &this
}

// NewComponentVersionWithDefaults instantiates a new ComponentVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentVersionWithDefaults() *ComponentVersion {
	this := ComponentVersion{}
	return &this
}

// GetId returns the Id field value
func (o *ComponentVersion) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ComponentVersion) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ComponentVersion) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ComponentVersion) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ComponentVersion) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ComponentVersion) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetComponent returns the Component field value
func (o *ComponentVersion) GetComponent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Component
}

// GetComponentOk returns a tuple with the Component field value
// and a boolean to check if the value has been set.
func (o *ComponentVersion) GetComponentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Component, true
}

// SetComponent sets field value
func (o *ComponentVersion) SetComponent(v string) {
	o.Component = v
}

// GetVersion returns the Version field value
func (o *ComponentVersion) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ComponentVersion) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ComponentVersion) SetVersion(v string) {
	o.Version = v
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *ComponentVersion) GetBranch() string {
	if o == nil || IsNil(o.Branch) {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentVersion) GetBranchOk() (*string, bool) {
	if o == nil || IsNil(o.Branch) {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *ComponentVersion) HasBranch() bool {
	if o != nil && !IsNil(o.Branch) {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *ComponentVersion) SetBranch(v string) {
	o.Branch = &v
}

func (o ComponentVersion) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComponentVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["component"] = o.Component
	toSerialize["version"] = o.Version
	if !IsNil(o.Branch) {
		toSerialize["branch"] = o.Branch
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ComponentVersion) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"component",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varComponentVersion := _ComponentVersion{}

	err = json.Unmarshal(data, &varComponentVersion)

	if err != nil {
		return err
	}

	*o = ComponentVersion(varComponentVersion)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "component")
		delete(additionalProperties, "version")
		delete(additionalProperties, "branch")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableComponentVersion struct {
	value *ComponentVersion
	isSet bool
}

func (v NullableComponentVersion) Get() *ComponentVersion {
	return v.value
}

func (v *NullableComponentVersion) Set(val *ComponentVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableComponentVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableComponentVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponentVersion(val *ComponentVersion) *NullableComponentVersion {
	return &NullableComponentVersion{value: val, isSet: true}
}

func (v NullableComponentVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponentVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
