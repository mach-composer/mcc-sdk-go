/*
MCC Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mccsdk

import (
	"encoding/json"
	"time"
)

// ComponentVersion struct for ComponentVersion
type ComponentVersion struct {
	CreatedAt time.Time `json:"created_at"`
	// key of the component
	Component string `json:"component"`
	// version of the component
	Version string `json:"version"`
	// commit hash of the component
	CommitHash *string `json:"commit_hash,omitempty"`
}

// NewComponentVersion instantiates a new ComponentVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponentVersion(createdAt time.Time, component string, version string) *ComponentVersion {
	this := ComponentVersion{}
	this.CreatedAt = createdAt
	this.Component = component
	this.Version = version
	return &this
}

// NewComponentVersionWithDefaults instantiates a new ComponentVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentVersionWithDefaults() *ComponentVersion {
	this := ComponentVersion{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *ComponentVersion) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ComponentVersion) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ComponentVersion) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetComponent returns the Component field value
func (o *ComponentVersion) GetComponent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Component
}

// GetComponentOk returns a tuple with the Component field value
// and a boolean to check if the value has been set.
func (o *ComponentVersion) GetComponentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Component, true
}

// SetComponent sets field value
func (o *ComponentVersion) SetComponent(v string) {
	o.Component = v
}

// GetVersion returns the Version field value
func (o *ComponentVersion) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ComponentVersion) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ComponentVersion) SetVersion(v string) {
	o.Version = v
}

// GetCommitHash returns the CommitHash field value if set, zero value otherwise.
func (o *ComponentVersion) GetCommitHash() string {
	if o == nil || o.CommitHash == nil {
		var ret string
		return ret
	}
	return *o.CommitHash
}

// GetCommitHashOk returns a tuple with the CommitHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentVersion) GetCommitHashOk() (*string, bool) {
	if o == nil || o.CommitHash == nil {
		return nil, false
	}
	return o.CommitHash, true
}

// HasCommitHash returns a boolean if a field has been set.
func (o *ComponentVersion) HasCommitHash() bool {
	if o != nil && o.CommitHash != nil {
		return true
	}

	return false
}

// SetCommitHash gets a reference to the given string and assigns it to the CommitHash field.
func (o *ComponentVersion) SetCommitHash(v string) {
	o.CommitHash = &v
}

func (o ComponentVersion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["component"] = o.Component
	}
	if true {
		toSerialize["version"] = o.Version
	}
	if o.CommitHash != nil {
		toSerialize["commit_hash"] = o.CommitHash
	}
	return json.Marshal(toSerialize)
}

type NullableComponentVersion struct {
	value *ComponentVersion
	isSet bool
}

func (v NullableComponentVersion) Get() *ComponentVersion {
	return v.value
}

func (v *NullableComponentVersion) Set(val *ComponentVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableComponentVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableComponentVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponentVersion(val *ComponentVersion) *NullableComponentVersion {
	return &NullableComponentVersion{value: val, isSet: true}
}

func (v NullableComponentVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponentVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
