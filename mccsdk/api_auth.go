/*
MCC Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mccsdk

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

// AuthApiService AuthApi service
type AuthApiService service

type ApiAuthorizeRequest struct {
	ctx                 context.Context
	ApiService          *AuthApiService
	audience            *string
	responseType        *string
	provider            *string
	codeChallenge       *string
	codeChallengeMethod *string
	redirectUri         *string
}

func (r ApiAuthorizeRequest) Audience(audience string) ApiAuthorizeRequest {
	r.audience = &audience
	return r
}

func (r ApiAuthorizeRequest) ResponseType(responseType string) ApiAuthorizeRequest {
	r.responseType = &responseType
	return r
}

func (r ApiAuthorizeRequest) Provider(provider string) ApiAuthorizeRequest {
	r.provider = &provider
	return r
}

func (r ApiAuthorizeRequest) CodeChallenge(codeChallenge string) ApiAuthorizeRequest {
	r.codeChallenge = &codeChallenge
	return r
}

func (r ApiAuthorizeRequest) CodeChallengeMethod(codeChallengeMethod string) ApiAuthorizeRequest {
	r.codeChallengeMethod = &codeChallengeMethod
	return r
}

func (r ApiAuthorizeRequest) RedirectUri(redirectUri string) ApiAuthorizeRequest {
	r.redirectUri = &redirectUri
	return r
}

func (r ApiAuthorizeRequest) Execute() (*http.Response, error) {
	return r.ApiService.AuthorizeExecute(r)
}

/*
Authorize Start authorization flow

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAuthorizeRequest
*/
func (a *AuthApiService) Authorize(ctx context.Context) ApiAuthorizeRequest {
	return ApiAuthorizeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AuthApiService) AuthorizeExecute(r ApiAuthorizeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthApiService.Authorize")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/authorize"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.audience != nil {
		localVarQueryParams.Add("audience", parameterToString(*r.audience, ""))
	}
	if r.responseType != nil {
		localVarQueryParams.Add("response_type", parameterToString(*r.responseType, ""))
	}
	if r.provider != nil {
		localVarQueryParams.Add("provider", parameterToString(*r.provider, ""))
	}
	if r.codeChallenge != nil {
		localVarQueryParams.Add("code_challenge", parameterToString(*r.codeChallenge, ""))
	}
	if r.codeChallengeMethod != nil {
		localVarQueryParams.Add("code_challenge_method", parameterToString(*r.codeChallengeMethod, ""))
	}
	if r.redirectUri != nil {
		localVarQueryParams.Add("redirect_uri", parameterToString(*r.redirectUri, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAuthTokenRequest struct {
	ctx          context.Context
	ApiService   *AuthApiService
	grantType    *string
	clientId     *string
	codeVerifier *string
	code         *string
	redirectUri  *string
}

func (r ApiGetAuthTokenRequest) GrantType(grantType string) ApiGetAuthTokenRequest {
	r.grantType = &grantType
	return r
}

func (r ApiGetAuthTokenRequest) ClientId(clientId string) ApiGetAuthTokenRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetAuthTokenRequest) CodeVerifier(codeVerifier string) ApiGetAuthTokenRequest {
	r.codeVerifier = &codeVerifier
	return r
}

func (r ApiGetAuthTokenRequest) Code(code string) ApiGetAuthTokenRequest {
	r.code = &code
	return r
}

func (r ApiGetAuthTokenRequest) RedirectUri(redirectUri string) ApiGetAuthTokenRequest {
	r.redirectUri = &redirectUri
	return r
}

func (r ApiGetAuthTokenRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetAuthTokenExecute(r)
}

/*
GetAuthToken Return a new token

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetAuthTokenRequest
*/
func (a *AuthApiService) GetAuthToken(ctx context.Context) ApiGetAuthTokenRequest {
	return ApiGetAuthTokenRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AuthApiService) GetAuthTokenExecute(r ApiGetAuthTokenRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthApiService.GetAuthToken")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/oauth/token"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.grantType != nil {
		localVarQueryParams.Add("grant_type", parameterToString(*r.grantType, ""))
	}
	if r.clientId != nil {
		localVarQueryParams.Add("client_id", parameterToString(*r.clientId, ""))
	}
	if r.codeVerifier != nil {
		localVarQueryParams.Add("code_verifier", parameterToString(*r.codeVerifier, ""))
	}
	if r.code != nil {
		localVarQueryParams.Add("code", parameterToString(*r.code, ""))
	}
	if r.redirectUri != nil {
		localVarQueryParams.Add("redirect_uri", parameterToString(*r.redirectUri, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIntrospectTokenRequest struct {
	ctx        context.Context
	ApiService *AuthApiService
	token      *string
}

func (r ApiIntrospectTokenRequest) Token(token string) ApiIntrospectTokenRequest {
	r.token = &token
	return r
}

func (r ApiIntrospectTokenRequest) Execute() (*http.Response, error) {
	return r.ApiService.IntrospectTokenExecute(r)
}

/*
IntrospectToken Introspect an existing token

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiIntrospectTokenRequest
*/
func (a *AuthApiService) IntrospectToken(ctx context.Context) ApiIntrospectTokenRequest {
	return ApiIntrospectTokenRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AuthApiService) IntrospectTokenExecute(r ApiIntrospectTokenRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthApiService.IntrospectToken")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/oauth/introspect"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.token != nil {
		localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
