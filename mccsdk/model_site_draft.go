/*
MACH composer Cloud (MCC) Public API

# Introduction  MACH composer Cloud is a platform and API to facilitate and coordinate work across teams that build composable architectures using MACH technology.  All operations available in MACH composer cloud are available through this API. For more information about using it in your MACH architecture, have a look at the [documentation website](https://docs.machcomposer.io/cloud/index.html).

API version: 0.1.0
Contact: mach@labdigital.nl
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mccsdk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SiteDraft type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiteDraft{}

// SiteDraft struct for SiteDraft
type SiteDraft struct {
	// The key for the site
	Key string `json:"key"`
	// The name for the site
	Name string `json:"name"`
	// The description for the site
	Description *string `json:"description,omitempty"`
}

type _SiteDraft SiteDraft

// NewSiteDraft instantiates a new SiteDraft object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteDraft(key string, name string) *SiteDraft {
	this := SiteDraft{}
	this.Key = key
	this.Name = name
	return &this
}

// NewSiteDraftWithDefaults instantiates a new SiteDraft object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteDraftWithDefaults() *SiteDraft {
	this := SiteDraft{}
	return &this
}

// GetKey returns the Key field value
func (o *SiteDraft) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *SiteDraft) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *SiteDraft) SetKey(v string) {
	o.Key = v
}

// GetName returns the Name field value
func (o *SiteDraft) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SiteDraft) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SiteDraft) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SiteDraft) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteDraft) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SiteDraft) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SiteDraft) SetDescription(v string) {
	o.Description = &v
}

func (o SiteDraft) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiteDraft) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

func (o *SiteDraft) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSiteDraft := _SiteDraft{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSiteDraft)

	if err != nil {
		return err
	}

	*o = SiteDraft(varSiteDraft)

	return err
}

type NullableSiteDraft struct {
	value *SiteDraft
	isSet bool
}

func (v NullableSiteDraft) Get() *SiteDraft {
	return v.value
}

func (v *NullableSiteDraft) Set(val *SiteDraft) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteDraft) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteDraft) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteDraft(val *SiteDraft) *NullableSiteDraft {
	return &NullableSiteDraft{value: val, isSet: true}
}

func (v NullableSiteDraft) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteDraft) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
