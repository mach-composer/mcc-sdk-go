/*
MACH composer Cloud (MCC) Public API

# Introduction  MACH composer Cloud is a platform and API to facilitate and coordinate work across teams that build composable architectures using MACH technology.  All operations available in MACH composer cloud are available through this API. For more information about using it in your MACH architecture, have a look at the [documentation website](https://docs.machcomposer.io/cloud/index.html).

API version: 0.1.0
Contact: mach@labdigital.nl
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mccsdk

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the OrganizationUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizationUser{}

// OrganizationUser struct for OrganizationUser
type OrganizationUser struct {
	Id                   string    `json:"id"`
	CreatedAt            time.Time `json:"created_at"`
	LastModifiedAt       time.Time `json:"last_modified_at"`
	AccountStatus        string    `json:"account_status"`
	Name                 string    `json:"name"`
	Email                string    `json:"email"`
	AvatarUrl            *string   `json:"avatar_url,omitempty"`
	IsActive             *bool     `json:"is_active,omitempty"`
	IsStaff              *bool     `json:"is_staff,omitempty"`
	IsSuperuser          *bool     `json:"is_superuser,omitempty"`
	Projects             []Project `json:"projects"`
	AdditionalProperties map[string]interface{}
}

type _OrganizationUser OrganizationUser

// NewOrganizationUser instantiates a new OrganizationUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationUser(id string, createdAt time.Time, lastModifiedAt time.Time, accountStatus string, name string, email string, projects []Project) *OrganizationUser {
	this := OrganizationUser{}
	this.Id = id
	this.CreatedAt = createdAt
	this.LastModifiedAt = lastModifiedAt
	this.AccountStatus = accountStatus
	this.Name = name
	this.Email = email
	this.Projects = projects
	return &this
}

// NewOrganizationUserWithDefaults instantiates a new OrganizationUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationUserWithDefaults() *OrganizationUser {
	this := OrganizationUser{}
	return &this
}

// GetId returns the Id field value
func (o *OrganizationUser) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *OrganizationUser) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *OrganizationUser) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *OrganizationUser) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *OrganizationUser) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *OrganizationUser) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetLastModifiedAt returns the LastModifiedAt field value
func (o *OrganizationUser) GetLastModifiedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastModifiedAt
}

// GetLastModifiedAtOk returns a tuple with the LastModifiedAt field value
// and a boolean to check if the value has been set.
func (o *OrganizationUser) GetLastModifiedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModifiedAt, true
}

// SetLastModifiedAt sets field value
func (o *OrganizationUser) SetLastModifiedAt(v time.Time) {
	o.LastModifiedAt = v
}

// GetAccountStatus returns the AccountStatus field value
func (o *OrganizationUser) GetAccountStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountStatus
}

// GetAccountStatusOk returns a tuple with the AccountStatus field value
// and a boolean to check if the value has been set.
func (o *OrganizationUser) GetAccountStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountStatus, true
}

// SetAccountStatus sets field value
func (o *OrganizationUser) SetAccountStatus(v string) {
	o.AccountStatus = v
}

// GetName returns the Name field value
func (o *OrganizationUser) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OrganizationUser) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OrganizationUser) SetName(v string) {
	o.Name = v
}

// GetEmail returns the Email field value
func (o *OrganizationUser) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *OrganizationUser) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *OrganizationUser) SetEmail(v string) {
	o.Email = v
}

// GetAvatarUrl returns the AvatarUrl field value if set, zero value otherwise.
func (o *OrganizationUser) GetAvatarUrl() string {
	if o == nil || IsNil(o.AvatarUrl) {
		var ret string
		return ret
	}
	return *o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationUser) GetAvatarUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AvatarUrl) {
		return nil, false
	}
	return o.AvatarUrl, true
}

// HasAvatarUrl returns a boolean if a field has been set.
func (o *OrganizationUser) HasAvatarUrl() bool {
	if o != nil && !IsNil(o.AvatarUrl) {
		return true
	}

	return false
}

// SetAvatarUrl gets a reference to the given string and assigns it to the AvatarUrl field.
func (o *OrganizationUser) SetAvatarUrl(v string) {
	o.AvatarUrl = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *OrganizationUser) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationUser) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *OrganizationUser) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *OrganizationUser) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetIsStaff returns the IsStaff field value if set, zero value otherwise.
func (o *OrganizationUser) GetIsStaff() bool {
	if o == nil || IsNil(o.IsStaff) {
		var ret bool
		return ret
	}
	return *o.IsStaff
}

// GetIsStaffOk returns a tuple with the IsStaff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationUser) GetIsStaffOk() (*bool, bool) {
	if o == nil || IsNil(o.IsStaff) {
		return nil, false
	}
	return o.IsStaff, true
}

// HasIsStaff returns a boolean if a field has been set.
func (o *OrganizationUser) HasIsStaff() bool {
	if o != nil && !IsNil(o.IsStaff) {
		return true
	}

	return false
}

// SetIsStaff gets a reference to the given bool and assigns it to the IsStaff field.
func (o *OrganizationUser) SetIsStaff(v bool) {
	o.IsStaff = &v
}

// GetIsSuperuser returns the IsSuperuser field value if set, zero value otherwise.
func (o *OrganizationUser) GetIsSuperuser() bool {
	if o == nil || IsNil(o.IsSuperuser) {
		var ret bool
		return ret
	}
	return *o.IsSuperuser
}

// GetIsSuperuserOk returns a tuple with the IsSuperuser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationUser) GetIsSuperuserOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSuperuser) {
		return nil, false
	}
	return o.IsSuperuser, true
}

// HasIsSuperuser returns a boolean if a field has been set.
func (o *OrganizationUser) HasIsSuperuser() bool {
	if o != nil && !IsNil(o.IsSuperuser) {
		return true
	}

	return false
}

// SetIsSuperuser gets a reference to the given bool and assigns it to the IsSuperuser field.
func (o *OrganizationUser) SetIsSuperuser(v bool) {
	o.IsSuperuser = &v
}

// GetProjects returns the Projects field value
func (o *OrganizationUser) GetProjects() []Project {
	if o == nil {
		var ret []Project
		return ret
	}

	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value
// and a boolean to check if the value has been set.
func (o *OrganizationUser) GetProjectsOk() ([]Project, bool) {
	if o == nil {
		return nil, false
	}
	return o.Projects, true
}

// SetProjects sets field value
func (o *OrganizationUser) SetProjects(v []Project) {
	o.Projects = v
}

func (o OrganizationUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["last_modified_at"] = o.LastModifiedAt
	toSerialize["account_status"] = o.AccountStatus
	toSerialize["name"] = o.Name
	toSerialize["email"] = o.Email
	if !IsNil(o.AvatarUrl) {
		toSerialize["avatar_url"] = o.AvatarUrl
	}
	if !IsNil(o.IsActive) {
		toSerialize["is_active"] = o.IsActive
	}
	if !IsNil(o.IsStaff) {
		toSerialize["is_staff"] = o.IsStaff
	}
	if !IsNil(o.IsSuperuser) {
		toSerialize["is_superuser"] = o.IsSuperuser
	}
	toSerialize["projects"] = o.Projects

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrganizationUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"last_modified_at",
		"account_status",
		"name",
		"email",
		"projects",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrganizationUser := _OrganizationUser{}

	err = json.Unmarshal(data, &varOrganizationUser)

	if err != nil {
		return err
	}

	*o = OrganizationUser(varOrganizationUser)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "last_modified_at")
		delete(additionalProperties, "account_status")
		delete(additionalProperties, "name")
		delete(additionalProperties, "email")
		delete(additionalProperties, "avatar_url")
		delete(additionalProperties, "is_active")
		delete(additionalProperties, "is_staff")
		delete(additionalProperties, "is_superuser")
		delete(additionalProperties, "projects")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrganizationUser struct {
	value *OrganizationUser
	isSet bool
}

func (v NullableOrganizationUser) Get() *OrganizationUser {
	return v.value
}

func (v *NullableOrganizationUser) Set(val *OrganizationUser) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationUser) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationUser(val *OrganizationUser) *NullableOrganizationUser {
	return &NullableOrganizationUser{value: val, isSet: true}
}

func (v NullableOrganizationUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
