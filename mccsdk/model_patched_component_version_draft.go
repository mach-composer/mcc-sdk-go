/*
MACH composer Cloud (MCC) Public API

# Introduction  MACH composer Cloud is a platform and API to facilitate and coordinate work across teams that build composable architectures using MACH technology.  All operations available in MACH composer cloud are available through this API. For more information about using it in your MACH architecture, have a look at the [documentation website](https://docs.machcomposer.io/cloud/index.html).

API version: 0.1.0
Contact: mach@labdigital.nl
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mccsdk

import (
	"encoding/json"
)

// checks if the PatchedComponentVersionDraft type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedComponentVersionDraft{}

// PatchedComponentVersionDraft struct for PatchedComponentVersionDraft
type PatchedComponentVersionDraft struct {
	// version of the component
	Version *string `json:"version,omitempty"`
	// branch of the version
	Branch               *string `json:"branch,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PatchedComponentVersionDraft PatchedComponentVersionDraft

// NewPatchedComponentVersionDraft instantiates a new PatchedComponentVersionDraft object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedComponentVersionDraft() *PatchedComponentVersionDraft {
	this := PatchedComponentVersionDraft{}
	return &this
}

// NewPatchedComponentVersionDraftWithDefaults instantiates a new PatchedComponentVersionDraft object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedComponentVersionDraftWithDefaults() *PatchedComponentVersionDraft {
	this := PatchedComponentVersionDraft{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *PatchedComponentVersionDraft) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedComponentVersionDraft) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *PatchedComponentVersionDraft) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *PatchedComponentVersionDraft) SetVersion(v string) {
	o.Version = &v
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *PatchedComponentVersionDraft) GetBranch() string {
	if o == nil || IsNil(o.Branch) {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedComponentVersionDraft) GetBranchOk() (*string, bool) {
	if o == nil || IsNil(o.Branch) {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *PatchedComponentVersionDraft) HasBranch() bool {
	if o != nil && !IsNil(o.Branch) {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *PatchedComponentVersionDraft) SetBranch(v string) {
	o.Branch = &v
}

func (o PatchedComponentVersionDraft) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedComponentVersionDraft) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Branch) {
		toSerialize["branch"] = o.Branch
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PatchedComponentVersionDraft) UnmarshalJSON(data []byte) (err error) {
	varPatchedComponentVersionDraft := _PatchedComponentVersionDraft{}

	err = json.Unmarshal(data, &varPatchedComponentVersionDraft)

	if err != nil {
		return err
	}

	*o = PatchedComponentVersionDraft(varPatchedComponentVersionDraft)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "version")
		delete(additionalProperties, "branch")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePatchedComponentVersionDraft struct {
	value *PatchedComponentVersionDraft
	isSet bool
}

func (v NullablePatchedComponentVersionDraft) Get() *PatchedComponentVersionDraft {
	return v.value
}

func (v *NullablePatchedComponentVersionDraft) Set(val *PatchedComponentVersionDraft) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedComponentVersionDraft) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedComponentVersionDraft) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedComponentVersionDraft(val *PatchedComponentVersionDraft) *NullablePatchedComponentVersionDraft {
	return &NullablePatchedComponentVersionDraft{value: val, isSet: true}
}

func (v NullablePatchedComponentVersionDraft) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedComponentVersionDraft) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
