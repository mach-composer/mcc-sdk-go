/*
MCC Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mccsdk

import (
	"encoding/json"
)

// Paginator struct for Paginator
type Paginator struct {
	Count  float32 `json:"count"`
	Total  float32 `json:"total"`
	Offset float32 `json:"offset"`
	Limit  float32 `json:"limit"`
}

// NewPaginator instantiates a new Paginator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaginator(count float32, total float32, offset float32, limit float32) *Paginator {
	this := Paginator{}
	this.Count = count
	this.Total = total
	this.Offset = offset
	this.Limit = limit
	return &this
}

// NewPaginatorWithDefaults instantiates a new Paginator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaginatorWithDefaults() *Paginator {
	this := Paginator{}
	var offset float32 = 0
	this.Offset = offset
	var limit float32 = 20
	this.Limit = limit
	return &this
}

// GetCount returns the Count field value
func (o *Paginator) GetCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *Paginator) GetCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *Paginator) SetCount(v float32) {
	o.Count = v
}

// GetTotal returns the Total field value
func (o *Paginator) GetTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *Paginator) GetTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *Paginator) SetTotal(v float32) {
	o.Total = v
}

// GetOffset returns the Offset field value
func (o *Paginator) GetOffset() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
func (o *Paginator) GetOffsetOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offset, true
}

// SetOffset sets field value
func (o *Paginator) SetOffset(v float32) {
	o.Offset = v
}

// GetLimit returns the Limit field value
func (o *Paginator) GetLimit() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *Paginator) GetLimitOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *Paginator) SetLimit(v float32) {
	o.Limit = v
}

func (o Paginator) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["count"] = o.Count
	}
	if true {
		toSerialize["total"] = o.Total
	}
	if true {
		toSerialize["offset"] = o.Offset
	}
	if true {
		toSerialize["limit"] = o.Limit
	}
	return json.Marshal(toSerialize)
}

type NullablePaginator struct {
	value *Paginator
	isSet bool
}

func (v NullablePaginator) Get() *Paginator {
	return v.value
}

func (v *NullablePaginator) Set(val *Paginator) {
	v.value = val
	v.isSet = true
}

func (v NullablePaginator) IsSet() bool {
	return v.isSet
}

func (v *NullablePaginator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaginator(val *Paginator) *NullablePaginator {
	return &NullablePaginator{value: val, isSet: true}
}

func (v NullablePaginator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaginator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
