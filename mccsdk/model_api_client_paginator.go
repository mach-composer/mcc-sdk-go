/*
MCC Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mccsdk

import (
	"encoding/json"
)

// ApiClientPaginator struct for ApiClientPaginator
type ApiClientPaginator struct {
	Count   float32     `json:"count"`
	Total   float32     `json:"total"`
	Offset  float32     `json:"offset"`
	Limit   float32     `json:"limit"`
	Results []ApiClient `json:"results"`
}

// NewApiClientPaginator instantiates a new ApiClientPaginator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiClientPaginator(count float32, total float32, offset float32, limit float32, results []ApiClient) *ApiClientPaginator {
	this := ApiClientPaginator{}
	this.Count = count
	this.Total = total
	this.Offset = offset
	this.Limit = limit
	this.Results = results
	return &this
}

// NewApiClientPaginatorWithDefaults instantiates a new ApiClientPaginator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiClientPaginatorWithDefaults() *ApiClientPaginator {
	this := ApiClientPaginator{}
	var offset float32 = 0
	this.Offset = offset
	var limit float32 = 20
	this.Limit = limit
	return &this
}

// GetCount returns the Count field value
func (o *ApiClientPaginator) GetCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *ApiClientPaginator) GetCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *ApiClientPaginator) SetCount(v float32) {
	o.Count = v
}

// GetTotal returns the Total field value
func (o *ApiClientPaginator) GetTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *ApiClientPaginator) GetTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *ApiClientPaginator) SetTotal(v float32) {
	o.Total = v
}

// GetOffset returns the Offset field value
func (o *ApiClientPaginator) GetOffset() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
func (o *ApiClientPaginator) GetOffsetOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offset, true
}

// SetOffset sets field value
func (o *ApiClientPaginator) SetOffset(v float32) {
	o.Offset = v
}

// GetLimit returns the Limit field value
func (o *ApiClientPaginator) GetLimit() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *ApiClientPaginator) GetLimitOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *ApiClientPaginator) SetLimit(v float32) {
	o.Limit = v
}

// GetResults returns the Results field value
func (o *ApiClientPaginator) GetResults() []ApiClient {
	if o == nil {
		var ret []ApiClient
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *ApiClientPaginator) GetResultsOk() ([]ApiClient, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *ApiClientPaginator) SetResults(v []ApiClient) {
	o.Results = v
}

func (o ApiClientPaginator) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["count"] = o.Count
	}
	if true {
		toSerialize["total"] = o.Total
	}
	if true {
		toSerialize["offset"] = o.Offset
	}
	if true {
		toSerialize["limit"] = o.Limit
	}
	if true {
		toSerialize["results"] = o.Results
	}
	return json.Marshal(toSerialize)
}

type NullableApiClientPaginator struct {
	value *ApiClientPaginator
	isSet bool
}

func (v NullableApiClientPaginator) Get() *ApiClientPaginator {
	return v.value
}

func (v *NullableApiClientPaginator) Set(val *ApiClientPaginator) {
	v.value = val
	v.isSet = true
}

func (v NullableApiClientPaginator) IsSet() bool {
	return v.isSet
}

func (v *NullableApiClientPaginator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiClientPaginator(val *ApiClientPaginator) *NullableApiClientPaginator {
	return &NullableApiClientPaginator{value: val, isSet: true}
}

func (v NullableApiClientPaginator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiClientPaginator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
