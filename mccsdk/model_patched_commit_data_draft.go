/*
MACH composer Cloud (MCC) Public API

# Introduction  MACH composer Cloud is a platform and API to facilitate and coordinate work across teams that build composable architectures using MACH technology.  All operations available in MACH composer cloud are available through this API. For more information about using it in your MACH architecture, have a look at the [documentation website](https://docs.machcomposer.io/cloud/index.html).

API version: 0.1.0
Contact: mach@labdigital.nl
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mccsdk

import (
	"encoding/json"
)

// checks if the PatchedCommitDataDraft type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedCommitDataDraft{}

// PatchedCommitDataDraft struct for PatchedCommitDataDraft
type PatchedCommitDataDraft struct {
	Subject   *string                `json:"subject,omitempty"`
	Commit    *string                `json:"commit,omitempty"`
	Parents   []string               `json:"parents,omitempty"`
	Author    *CommitDataAuthorDraft `json:"author,omitempty"`
	Committer *CommitDataAuthorDraft `json:"committer,omitempty"`
}

// NewPatchedCommitDataDraft instantiates a new PatchedCommitDataDraft object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedCommitDataDraft() *PatchedCommitDataDraft {
	this := PatchedCommitDataDraft{}
	return &this
}

// NewPatchedCommitDataDraftWithDefaults instantiates a new PatchedCommitDataDraft object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedCommitDataDraftWithDefaults() *PatchedCommitDataDraft {
	this := PatchedCommitDataDraft{}
	return &this
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *PatchedCommitDataDraft) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedCommitDataDraft) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *PatchedCommitDataDraft) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *PatchedCommitDataDraft) SetSubject(v string) {
	o.Subject = &v
}

// GetCommit returns the Commit field value if set, zero value otherwise.
func (o *PatchedCommitDataDraft) GetCommit() string {
	if o == nil || IsNil(o.Commit) {
		var ret string
		return ret
	}
	return *o.Commit
}

// GetCommitOk returns a tuple with the Commit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedCommitDataDraft) GetCommitOk() (*string, bool) {
	if o == nil || IsNil(o.Commit) {
		return nil, false
	}
	return o.Commit, true
}

// HasCommit returns a boolean if a field has been set.
func (o *PatchedCommitDataDraft) HasCommit() bool {
	if o != nil && !IsNil(o.Commit) {
		return true
	}

	return false
}

// SetCommit gets a reference to the given string and assigns it to the Commit field.
func (o *PatchedCommitDataDraft) SetCommit(v string) {
	o.Commit = &v
}

// GetParents returns the Parents field value if set, zero value otherwise.
func (o *PatchedCommitDataDraft) GetParents() []string {
	if o == nil || IsNil(o.Parents) {
		var ret []string
		return ret
	}
	return o.Parents
}

// GetParentsOk returns a tuple with the Parents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedCommitDataDraft) GetParentsOk() ([]string, bool) {
	if o == nil || IsNil(o.Parents) {
		return nil, false
	}
	return o.Parents, true
}

// HasParents returns a boolean if a field has been set.
func (o *PatchedCommitDataDraft) HasParents() bool {
	if o != nil && !IsNil(o.Parents) {
		return true
	}

	return false
}

// SetParents gets a reference to the given []string and assigns it to the Parents field.
func (o *PatchedCommitDataDraft) SetParents(v []string) {
	o.Parents = v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *PatchedCommitDataDraft) GetAuthor() CommitDataAuthorDraft {
	if o == nil || IsNil(o.Author) {
		var ret CommitDataAuthorDraft
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedCommitDataDraft) GetAuthorOk() (*CommitDataAuthorDraft, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *PatchedCommitDataDraft) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given CommitDataAuthorDraft and assigns it to the Author field.
func (o *PatchedCommitDataDraft) SetAuthor(v CommitDataAuthorDraft) {
	o.Author = &v
}

// GetCommitter returns the Committer field value if set, zero value otherwise.
func (o *PatchedCommitDataDraft) GetCommitter() CommitDataAuthorDraft {
	if o == nil || IsNil(o.Committer) {
		var ret CommitDataAuthorDraft
		return ret
	}
	return *o.Committer
}

// GetCommitterOk returns a tuple with the Committer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedCommitDataDraft) GetCommitterOk() (*CommitDataAuthorDraft, bool) {
	if o == nil || IsNil(o.Committer) {
		return nil, false
	}
	return o.Committer, true
}

// HasCommitter returns a boolean if a field has been set.
func (o *PatchedCommitDataDraft) HasCommitter() bool {
	if o != nil && !IsNil(o.Committer) {
		return true
	}

	return false
}

// SetCommitter gets a reference to the given CommitDataAuthorDraft and assigns it to the Committer field.
func (o *PatchedCommitDataDraft) SetCommitter(v CommitDataAuthorDraft) {
	o.Committer = &v
}

func (o PatchedCommitDataDraft) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedCommitDataDraft) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.Commit) {
		toSerialize["commit"] = o.Commit
	}
	if !IsNil(o.Parents) {
		toSerialize["parents"] = o.Parents
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Committer) {
		toSerialize["committer"] = o.Committer
	}
	return toSerialize, nil
}

type NullablePatchedCommitDataDraft struct {
	value *PatchedCommitDataDraft
	isSet bool
}

func (v NullablePatchedCommitDataDraft) Get() *PatchedCommitDataDraft {
	return v.value
}

func (v *NullablePatchedCommitDataDraft) Set(val *PatchedCommitDataDraft) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedCommitDataDraft) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedCommitDataDraft) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedCommitDataDraft(val *PatchedCommitDataDraft) *NullablePatchedCommitDataDraft {
	return &NullablePatchedCommitDataDraft{value: val, isSet: true}
}

func (v NullablePatchedCommitDataDraft) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedCommitDataDraft) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
