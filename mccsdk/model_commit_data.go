/*
MCC Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mccsdk

import (
	"encoding/json"
	"time"
)

// CommitData struct for CommitData
type CommitData struct {
	Commit    string           `json:"commit"`
	Parents   []string         `json:"parents,omitempty"`
	Subject   string           `json:"subject"`
	Author    CommitDataAuthor `json:"author"`
	Committer CommitDataAuthor `json:"committer"`
	CreatedAt *time.Time       `json:"created_at,omitempty"`
}

// NewCommitData instantiates a new CommitData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitData(commit string, subject string, author CommitDataAuthor, committer CommitDataAuthor) *CommitData {
	this := CommitData{}
	this.Commit = commit
	this.Subject = subject
	this.Author = author
	this.Committer = committer
	return &this
}

// NewCommitDataWithDefaults instantiates a new CommitData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitDataWithDefaults() *CommitData {
	this := CommitData{}
	return &this
}

// GetCommit returns the Commit field value
func (o *CommitData) GetCommit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Commit
}

// GetCommitOk returns a tuple with the Commit field value
// and a boolean to check if the value has been set.
func (o *CommitData) GetCommitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Commit, true
}

// SetCommit sets field value
func (o *CommitData) SetCommit(v string) {
	o.Commit = v
}

// GetParents returns the Parents field value if set, zero value otherwise.
func (o *CommitData) GetParents() []string {
	if o == nil || o.Parents == nil {
		var ret []string
		return ret
	}
	return o.Parents
}

// GetParentsOk returns a tuple with the Parents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitData) GetParentsOk() ([]string, bool) {
	if o == nil || o.Parents == nil {
		return nil, false
	}
	return o.Parents, true
}

// HasParents returns a boolean if a field has been set.
func (o *CommitData) HasParents() bool {
	if o != nil && o.Parents != nil {
		return true
	}

	return false
}

// SetParents gets a reference to the given []string and assigns it to the Parents field.
func (o *CommitData) SetParents(v []string) {
	o.Parents = v
}

// GetSubject returns the Subject field value
func (o *CommitData) GetSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *CommitData) GetSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *CommitData) SetSubject(v string) {
	o.Subject = v
}

// GetAuthor returns the Author field value
func (o *CommitData) GetAuthor() CommitDataAuthor {
	if o == nil {
		var ret CommitDataAuthor
		return ret
	}

	return o.Author
}

// GetAuthorOk returns a tuple with the Author field value
// and a boolean to check if the value has been set.
func (o *CommitData) GetAuthorOk() (*CommitDataAuthor, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Author, true
}

// SetAuthor sets field value
func (o *CommitData) SetAuthor(v CommitDataAuthor) {
	o.Author = v
}

// GetCommitter returns the Committer field value
func (o *CommitData) GetCommitter() CommitDataAuthor {
	if o == nil {
		var ret CommitDataAuthor
		return ret
	}

	return o.Committer
}

// GetCommitterOk returns a tuple with the Committer field value
// and a boolean to check if the value has been set.
func (o *CommitData) GetCommitterOk() (*CommitDataAuthor, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Committer, true
}

// SetCommitter sets field value
func (o *CommitData) SetCommitter(v CommitDataAuthor) {
	o.Committer = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *CommitData) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitData) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *CommitData) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *CommitData) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

func (o CommitData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["commit"] = o.Commit
	}
	if o.Parents != nil {
		toSerialize["parents"] = o.Parents
	}
	if true {
		toSerialize["subject"] = o.Subject
	}
	if true {
		toSerialize["author"] = o.Author
	}
	if true {
		toSerialize["committer"] = o.Committer
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableCommitData struct {
	value *CommitData
	isSet bool
}

func (v NullableCommitData) Get() *CommitData {
	return v.value
}

func (v *NullableCommitData) Set(val *CommitData) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitData) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitData(val *CommitData) *NullableCommitData {
	return &NullableCommitData{value: val, isSet: true}
}

func (v NullableCommitData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
